
e:/Proyectos/Programacion/Particle/ARG_All_In_One/target/ARG_All_In_One.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002958  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016a4c  2**0
                  CONTENTS
  3 .data         000000b0  2003e288  000d6970  0000e288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000004b8  2003e338  2003e338  0001e338  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6a20  000d6a20  00016a20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6a48  000d6a48  00016a48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000cbdf1  00000000  00000000  00016a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00013ebc  00000000  00000000  000e283d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011bf0  00000000  00000000  000f66f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d50  00000000  00000000  001082e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002d60  00000000  00000000  0010a039  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003c07b  00000000  00000000  0010cd99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000364c9  00000000  00000000  00148e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d0147  00000000  00000000  0017f2dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b08c  00000000  00000000  0024f424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	a4 64 0d 00                                         .d..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f9f5 	bl	d641c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f9fa 	bl	d6432 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e288 	.word	0x2003e288
   d4048:	000d6970 	.word	0x000d6970
   d404c:	2003e338 	.word	0x2003e338
   d4050:	2003e338 	.word	0x2003e338
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fcb9 	bl	d59d0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6968 	.word	0x000d6968
   d4080:	000d6908 	.word	0x000d6908

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b836 	b.w	d40f4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f88f 	bl	d41ac <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bc6b 	b.w	d596c <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 bb0d 	b.w	d56b4 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 bb0b 	b.w	d56b4 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_Z5cleanv>:
    //success = Particle.function("swHomework", swHomework);
}

/*--------------------FUNCIÓN CLEAN---------------------------
-------------------------------------------------------------*/
void clean(void){
   d40b0:	b538      	push	{r3, r4, r5, lr}
    for(int i = 0; i <= 7; i++){
        pinMode(Dig_Out[i], OUTPUT);
   d40b2:	4d0d      	ldr	r5, [pc, #52]	; (d40e8 <_Z5cleanv+0x38>)
}

/*--------------------FUNCIÓN CLEAN---------------------------
-------------------------------------------------------------*/
void clean(void){
    for(int i = 0; i <= 7; i++){
   d40b4:	2400      	movs	r4, #0
        pinMode(Dig_Out[i], OUTPUT);
   d40b6:	f835 0024 	ldrh.w	r0, [r5, r4, lsl #2]
   d40ba:	2101      	movs	r1, #1
   d40bc:	f001 ffce 	bl	d605c <pinMode>
        digitalWrite(Dig_Out[i], LOW);
   d40c0:	f835 0024 	ldrh.w	r0, [r5, r4, lsl #2]
   d40c4:	2100      	movs	r1, #0
}

/*--------------------FUNCIÓN CLEAN---------------------------
-------------------------------------------------------------*/
void clean(void){
    for(int i = 0; i <= 7; i++){
   d40c6:	3401      	adds	r4, #1
        pinMode(Dig_Out[i], OUTPUT);
        digitalWrite(Dig_Out[i], LOW);
   d40c8:	f001 ffd9 	bl	d607e <digitalWrite>
}

/*--------------------FUNCIÓN CLEAN---------------------------
-------------------------------------------------------------*/
void clean(void){
    for(int i = 0; i <= 7; i++){
   d40cc:	2c08      	cmp	r4, #8
   d40ce:	d1f2      	bne.n	d40b6 <_Z5cleanv+0x6>
        pinMode(Dig_Out[i], OUTPUT);
        digitalWrite(Dig_Out[i], LOW);
    }
    
    for(int i = 0; i <= 7; i++){
        mcp.digitalWrite(porta[i], LOW);
   d40d0:	4d06      	ldr	r5, [pc, #24]	; (d40ec <_Z5cleanv+0x3c>)
   d40d2:	2400      	movs	r4, #0
   d40d4:	5d29      	ldrb	r1, [r5, r4]
   d40d6:	4806      	ldr	r0, [pc, #24]	; (d40f0 <_Z5cleanv+0x40>)
   d40d8:	2200      	movs	r2, #0
    for(int i = 0; i <= 7; i++){
        pinMode(Dig_Out[i], OUTPUT);
        digitalWrite(Dig_Out[i], LOW);
    }
    
    for(int i = 0; i <= 7; i++){
   d40da:	3401      	adds	r4, #1
        mcp.digitalWrite(porta[i], LOW);
   d40dc:	f000 fe79 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
    for(int i = 0; i <= 7; i++){
        pinMode(Dig_Out[i], OUTPUT);
        digitalWrite(Dig_Out[i], LOW);
    }
    
    for(int i = 0; i <= 7; i++){
   d40e0:	2c08      	cmp	r4, #8
   d40e2:	d1f7      	bne.n	d40d4 <_Z5cleanv+0x24>
        mcp.digitalWrite(porta[i], LOW);
    }
}
   d40e4:	bd38      	pop	{r3, r4, r5, pc}
   d40e6:	bf00      	nop
   d40e8:	2003e28c 	.word	0x2003e28c
   d40ec:	2003e2ac 	.word	0x2003e2ac
   d40f0:	2003e36c 	.word	0x2003e36c

000d40f4 <setup>:

ADC_a_Serial adc_a_Serial;

/*--------------------FUNCIÓN SETUP----------------------------
-------------------------------------------------------------*/
void setup() {
   d40f4:	b570      	push	{r4, r5, r6, lr}

    Serial.begin(9600);
   d40f6:	f001 fd41 	bl	d5b7c <_Z16_fetch_usbserialv>
   d40fa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40fe:	f001 fd31 	bl	d5b64 <_ZN9USBSerial5beginEl>

    mcp.begin(0);
   d4102:	2100      	movs	r1, #0
   d4104:	481b      	ldr	r0, [pc, #108]	; (d4174 <setup+0x80>)
    clean();

    for(uint8_t i=0; i<=7; i++)
    {
        mcp.pinMode(porta[i], OUTPUT);
   d4106:	4e1c      	ldr	r6, [pc, #112]	; (d4178 <setup+0x84>)
        mcp.pinMode(portb[i], INPUT);
   d4108:	4d1c      	ldr	r5, [pc, #112]	; (d417c <setup+0x88>)
-------------------------------------------------------------*/
void setup() {

    Serial.begin(9600);

    mcp.begin(0);
   d410a:	f000 fe07 	bl	d4d1c <_ZN17Adafruit_MCP230175beginEh>
    clean();
   d410e:	f7ff ffcf 	bl	d40b0 <_Z5cleanv>
   d4112:	2400      	movs	r4, #0

    for(uint8_t i=0; i<=7; i++)
    {
        mcp.pinMode(porta[i], OUTPUT);
   d4114:	5d31      	ldrb	r1, [r6, r4]
   d4116:	4817      	ldr	r0, [pc, #92]	; (d4174 <setup+0x80>)
   d4118:	2201      	movs	r2, #1
   d411a:	f000 fe15 	bl	d4d48 <_ZN17Adafruit_MCP230177pinModeEhh>
        mcp.pinMode(portb[i], INPUT);
   d411e:	5d29      	ldrb	r1, [r5, r4]
   d4120:	4814      	ldr	r0, [pc, #80]	; (d4174 <setup+0x80>)
   d4122:	2200      	movs	r2, #0
   d4124:	3401      	adds	r4, #1
   d4126:	f000 fe0f 	bl	d4d48 <_ZN17Adafruit_MCP230177pinModeEhh>
    Serial.begin(9600);

    mcp.begin(0);
    clean();

    for(uint8_t i=0; i<=7; i++)
   d412a:	2c08      	cmp	r4, #8
   d412c:	d1f2      	bne.n	d4114 <setup+0x20>

    contador_Binario.begin();

    auto_Increible.begin();

    contador_RGB.begin(Red, Green, Blue);
   d412e:	4e14      	ldr	r6, [pc, #80]	; (d4180 <setup+0x8c>)
   d4130:	4d14      	ldr	r5, [pc, #80]	; (d4184 <setup+0x90>)
   d4132:	4c15      	ldr	r4, [pc, #84]	; (d4188 <setup+0x94>)
    {
        mcp.pinMode(porta[i], OUTPUT);
        mcp.pinMode(portb[i], INPUT);
    }

    contador_Binario.begin();
   d4134:	4815      	ldr	r0, [pc, #84]	; (d418c <setup+0x98>)
   d4136:	f000 ff35 	bl	d4fa4 <_ZN16Contador_Binario5beginEv>

    auto_Increible.begin();
   d413a:	4815      	ldr	r0, [pc, #84]	; (d4190 <setup+0x9c>)
   d413c:	f000 fcce 	bl	d4adc <_ZN14Auto_Increible5beginEv>

    contador_RGB.begin(Red, Green, Blue);
   d4140:	6833      	ldr	r3, [r6, #0]
   d4142:	682a      	ldr	r2, [r5, #0]
   d4144:	6821      	ldr	r1, [r4, #0]
   d4146:	4813      	ldr	r0, [pc, #76]	; (d4194 <setup+0xa0>)
   d4148:	f000 ff50 	bl	d4fec <_ZN12Contador_RGB5beginEiii>

    contador_Neopixel.begin();
   d414c:	4812      	ldr	r0, [pc, #72]	; (d4198 <setup+0xa4>)
   d414e:	f000 fbf3 	bl	d4938 <_ZN17Contador_Neopixel5beginEv>

    adc_a_RGB.begin(Red, Green, Blue);
   d4152:	6833      	ldr	r3, [r6, #0]
   d4154:	682a      	ldr	r2, [r5, #0]
   d4156:	6821      	ldr	r1, [r4, #0]
   d4158:	4810      	ldr	r0, [pc, #64]	; (d419c <setup+0xa8>)
   d415a:	f000 fe61 	bl	d4e20 <_ZN9ADC_a_RGB5beginEiii>
    
    adc_a_Neopixel.begin();
   d415e:	4810      	ldr	r0, [pc, #64]	; (d41a0 <setup+0xac>)
   d4160:	f000 f8da 	bl	d4318 <_ZN14ADC_a_Neopixel5beginEv>
    
    adc_a_Neopixel2.begin();
   d4164:	480f      	ldr	r0, [pc, #60]	; (d41a4 <setup+0xb0>)
   d4166:	f001 f803 	bl	d5170 <_ZN15ADC_a_Neopixel25beginEv>

    adc_a_Serial.begin();
   d416a:	480f      	ldr	r0, [pc, #60]	; (d41a8 <setup+0xb4>)
}
   d416c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    
    adc_a_Neopixel.begin();
    
    adc_a_Neopixel2.begin();

    adc_a_Serial.begin();
   d4170:	f000 b90a 	b.w	d4388 <_ZN12ADC_a_Serial5beginEv>
   d4174:	2003e36c 	.word	0x2003e36c
   d4178:	2003e2ac 	.word	0x2003e2ac
   d417c:	2003e2b4 	.word	0x2003e2b4
   d4180:	2003e2bc 	.word	0x2003e2bc
   d4184:	2003e2c0 	.word	0x2003e2c0
   d4188:	2003e288 	.word	0x2003e288
   d418c:	2003e364 	.word	0x2003e364
   d4190:	2003e358 	.word	0x2003e358
   d4194:	2003e340 	.word	0x2003e340
   d4198:	2003e354 	.word	0x2003e354
   d419c:	2003e370 	.word	0x2003e370
   d41a0:	2003e33c 	.word	0x2003e33c
   d41a4:	2003e350 	.word	0x2003e350
   d41a8:	2003e360 	.word	0x2003e360

000d41ac <loop>:
}

/*--------------------FUNCIÓN LOOP----------------------------
-------------------------------------------------------------*/
void loop() {
   d41ac:	b508      	push	{r3, lr}

    Inputs = mcp.readGPIO(1);
   d41ae:	2101      	movs	r1, #1
   d41b0:	4835      	ldr	r0, [pc, #212]	; (d4288 <loop+0xdc>)
   d41b2:	f000 fdd5 	bl	d4d60 <_ZN17Adafruit_MCP230178readGPIOEh>
   d41b6:	4b35      	ldr	r3, [pc, #212]	; (d428c <loop+0xe0>)
   d41b8:	7018      	strb	r0, [r3, #0]
    
    switch(Inputs) {
   d41ba:	2808      	cmp	r0, #8
   d41bc:	d85f      	bhi.n	d427e <loop+0xd2>
   d41be:	e8df f000 	tbb	[pc, r0]
   d41c2:	0557      	.short	0x0557
   d41c4:	3329190f 	.word	0x3329190f
   d41c8:	4d43      	.short	0x4d43
   d41ca:	57          	.byte	0x57
   d41cb:	00          	.byte	0x00
            clean(); //OFF
            delay(250);
            break;
            
        case 0x01:
            clean();
   d41cc:	f7ff ff70 	bl	d40b0 <_Z5cleanv>
            contador_Binario.process();  //CONTADOR_BINARIO
   d41d0:	482f      	ldr	r0, [pc, #188]	; (d4290 <loop+0xe4>)
   d41d2:	f000 fef1 	bl	d4fb8 <_ZN16Contador_Binario7processEv>
            delay(250);
   d41d6:	20fa      	movs	r0, #250	; 0xfa
            clean();
            break;
    }

    //success = Particle.function("swHomework", swHomework);
}
   d41d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            break;
            
        case 0x01:
            clean();
            contador_Binario.process();  //CONTADOR_BINARIO
            delay(250);
   d41dc:	f001 bb88 	b.w	d58f0 <delay>
            break;
            
        case 0x02:
            clean();
   d41e0:	f7ff ff66 	bl	d40b0 <_Z5cleanv>
            auto_Increible.process(); //AUTO_INCREIBLE
   d41e4:	482b      	ldr	r0, [pc, #172]	; (d4294 <loop+0xe8>)
   d41e6:	f000 fc8f 	bl	d4b08 <_ZN14Auto_Increible7processEv>
            delay(250);
   d41ea:	20fa      	movs	r0, #250	; 0xfa
            clean();
            break;
    }

    //success = Particle.function("swHomework", swHomework);
}
   d41ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            break;
            
        case 0x02:
            clean();
            auto_Increible.process(); //AUTO_INCREIBLE
            delay(250);
   d41f0:	f001 bb7e 	b.w	d58f0 <delay>
            break;
            
        case 0x03:
            clean();
   d41f4:	f7ff ff5c 	bl	d40b0 <_Z5cleanv>
            contador_RGB.process(Red, Green, Blue); //CONTADOR_RGB
   d41f8:	4b27      	ldr	r3, [pc, #156]	; (d4298 <loop+0xec>)
   d41fa:	4a28      	ldr	r2, [pc, #160]	; (d429c <loop+0xf0>)
   d41fc:	4928      	ldr	r1, [pc, #160]	; (d42a0 <loop+0xf4>)
   d41fe:	681b      	ldr	r3, [r3, #0]
   d4200:	4828      	ldr	r0, [pc, #160]	; (d42a4 <loop+0xf8>)
   d4202:	6812      	ldr	r2, [r2, #0]
   d4204:	6809      	ldr	r1, [r1, #0]
   d4206:	f000 ff17 	bl	d5038 <_ZN12Contador_RGB7processEiii>
            delay(250);
   d420a:	20fa      	movs	r0, #250	; 0xfa
            clean();
            break;
    }

    //success = Particle.function("swHomework", swHomework);
}
   d420c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            break;
            
        case 0x03:
            clean();
            contador_RGB.process(Red, Green, Blue); //CONTADOR_RGB
            delay(250);
   d4210:	f001 bb6e 	b.w	d58f0 <delay>
            break;
            
        case 0x04:
            clean();
   d4214:	f7ff ff4c 	bl	d40b0 <_Z5cleanv>
            contador_Neopixel.process(); //CONTADOR_NEOPIXEL
   d4218:	4823      	ldr	r0, [pc, #140]	; (d42a8 <loop+0xfc>)
   d421a:	f000 fbc9 	bl	d49b0 <_ZN17Contador_Neopixel7processEv>
            delay(250);
   d421e:	20fa      	movs	r0, #250	; 0xfa
            clean();
            break;
    }

    //success = Particle.function("swHomework", swHomework);
}
   d4220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            break;
            
        case 0x04:
            clean();
            contador_Neopixel.process(); //CONTADOR_NEOPIXEL
            delay(250);
   d4224:	f001 bb64 	b.w	d58f0 <delay>
            break;
            
        case 0x05:
            clean();
   d4228:	f7ff ff42 	bl	d40b0 <_Z5cleanv>
            adc_a_RGB.process(Red, Green, Blue); //ADC_A_RGB
   d422c:	4b1a      	ldr	r3, [pc, #104]	; (d4298 <loop+0xec>)
   d422e:	4a1b      	ldr	r2, [pc, #108]	; (d429c <loop+0xf0>)
   d4230:	491b      	ldr	r1, [pc, #108]	; (d42a0 <loop+0xf4>)
   d4232:	681b      	ldr	r3, [r3, #0]
   d4234:	481d      	ldr	r0, [pc, #116]	; (d42ac <loop+0x100>)
   d4236:	6812      	ldr	r2, [r2, #0]
   d4238:	6809      	ldr	r1, [r1, #0]
   d423a:	f000 fe0b 	bl	d4e54 <_ZN9ADC_a_RGB7processEiii>
            delay(250);
   d423e:	20fa      	movs	r0, #250	; 0xfa
            clean();
            break;
    }

    //success = Particle.function("swHomework", swHomework);
}
   d4240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            break;
            
        case 0x05:
            clean();
            adc_a_RGB.process(Red, Green, Blue); //ADC_A_RGB
            delay(250);
   d4244:	f001 bb54 	b.w	d58f0 <delay>
            break;
            
        case 0x06:
            clean();
   d4248:	f7ff ff32 	bl	d40b0 <_Z5cleanv>
            adc_a_Neopixel2.process(); //ADC_A_NEOPIXEL2
   d424c:	4818      	ldr	r0, [pc, #96]	; (d42b0 <loop+0x104>)
   d424e:	f000 ffa7 	bl	d51a0 <_ZN15ADC_a_Neopixel27processEv>
            delay(250);
   d4252:	20fa      	movs	r0, #250	; 0xfa
            clean();
            break;
    }

    //success = Particle.function("swHomework", swHomework);
}
   d4254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            break;
            
        case 0x06:
            clean();
            adc_a_Neopixel2.process(); //ADC_A_NEOPIXEL2
            delay(250);
   d4258:	f001 bb4a 	b.w	d58f0 <delay>
            break;
            
        case 0x07:
            clean();
   d425c:	f7ff ff28 	bl	d40b0 <_Z5cleanv>
            adc_a_Serial.process(); //ADC_A_SERIAL
   d4260:	4814      	ldr	r0, [pc, #80]	; (d42b4 <loop+0x108>)
   d4262:	f000 f89f 	bl	d43a4 <_ZN12ADC_a_Serial7processEv>
            delay(250);
   d4266:	20fa      	movs	r0, #250	; 0xfa
            clean();
            break;
    }

    //success = Particle.function("swHomework", swHomework);
}
   d4268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            break;
            
        case 0x07:
            clean();
            adc_a_Serial.process(); //ADC_A_SERIAL
            delay(250);
   d426c:	f001 bb40 	b.w	d58f0 <delay>
            break;
            
        case 0x08:
            clean();
   d4270:	f7ff ff1e 	bl	d40b0 <_Z5cleanv>
            delay(250);
   d4274:	20fa      	movs	r0, #250	; 0xfa
            clean();
            break;
    }

    //success = Particle.function("swHomework", swHomework);
}
   d4276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            delay(250);
            break;
            
        case 0x08:
            clean();
            delay(250);
   d427a:	f001 bb39 	b.w	d58f0 <delay>
            clean();
            break;
    }

    //success = Particle.function("swHomework", swHomework);
}
   d427e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            clean();
            delay(250);
            break;
            
        default:
            clean();
   d4282:	f7ff bf15 	b.w	d40b0 <_Z5cleanv>
   d4286:	bf00      	nop
   d4288:	2003e36c 	.word	0x2003e36c
   d428c:	2003e36d 	.word	0x2003e36d
   d4290:	2003e364 	.word	0x2003e364
   d4294:	2003e358 	.word	0x2003e358
   d4298:	2003e2bc 	.word	0x2003e2bc
   d429c:	2003e2c0 	.word	0x2003e2c0
   d42a0:	2003e288 	.word	0x2003e288
   d42a4:	2003e340 	.word	0x2003e340
   d42a8:	2003e354 	.word	0x2003e354
   d42ac:	2003e370 	.word	0x2003e370
   d42b0:	2003e350 	.word	0x2003e350
   d42b4:	2003e360 	.word	0x2003e360

000d42b8 <_GLOBAL__sub_I_porta>:
        return 7;
    } else {
        clean();
        return -1;
    }
   d42b8:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42ba:	f001 f817 	bl	d52ec <HAL_Pin_Map>

/*---------------INSTANCIAS-----------------------------------
-------------------------------------------------------------*/
Adafruit_MCP23017 mcp;

Contador_Binario contador_Binario(0);
   d42be:	2100      	movs	r1, #0
   d42c0:	480c      	ldr	r0, [pc, #48]	; (d42f4 <_GLOBAL__sub_I_porta+0x3c>)
   d42c2:	f000 fe6d 	bl	d4fa0 <_ZN16Contador_BinarioC1Ei>

Auto_Increible auto_Increible;
   d42c6:	480c      	ldr	r0, [pc, #48]	; (d42f8 <_GLOBAL__sub_I_porta+0x40>)
   d42c8:	f000 fc06 	bl	d4ad8 <_ZN14Auto_IncreibleC1Ev>

Contador_RGB contador_RGB;
   d42cc:	480b      	ldr	r0, [pc, #44]	; (d42fc <_GLOBAL__sub_I_porta+0x44>)
   d42ce:	f000 fe86 	bl	d4fde <_ZN12Contador_RGBC1Ev>

Contador_Neopixel contador_Neopixel;
   d42d2:	480b      	ldr	r0, [pc, #44]	; (d4300 <_GLOBAL__sub_I_porta+0x48>)
   d42d4:	f000 fb2e 	bl	d4934 <_ZN17Contador_NeopixelC1Ev>

ADC_a_Neopixel adc_a_Neopixel;
   d42d8:	480a      	ldr	r0, [pc, #40]	; (d4304 <_GLOBAL__sub_I_porta+0x4c>)
   d42da:	f000 f81b 	bl	d4314 <_ZN14ADC_a_NeopixelC1Ev>

ADC_a_Neopixel2 adc_a_Neopixel2;
   d42de:	480a      	ldr	r0, [pc, #40]	; (d4308 <_GLOBAL__sub_I_porta+0x50>)
   d42e0:	f000 ff44 	bl	d516c <_ZN15ADC_a_Neopixel2C1Ev>

ADC_a_RGB adc_a_RGB;
   d42e4:	4809      	ldr	r0, [pc, #36]	; (d430c <_GLOBAL__sub_I_porta+0x54>)
   d42e6:	f000 fd93 	bl	d4e10 <_ZN9ADC_a_RGBC1Ev>

ADC_a_Serial adc_a_Serial;
   d42ea:	4809      	ldr	r0, [pc, #36]	; (d4310 <_GLOBAL__sub_I_porta+0x58>)
        return 7;
    } else {
        clean();
        return -1;
    }
   d42ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

ADC_a_Neopixel2 adc_a_Neopixel2;

ADC_a_RGB adc_a_RGB;

ADC_a_Serial adc_a_Serial;
   d42f0:	f000 b848 	b.w	d4384 <_ZN12ADC_a_SerialC1Ev>
   d42f4:	2003e364 	.word	0x2003e364
   d42f8:	2003e358 	.word	0x2003e358
   d42fc:	2003e340 	.word	0x2003e340
   d4300:	2003e354 	.word	0x2003e354
   d4304:	2003e33c 	.word	0x2003e33c
   d4308:	2003e350 	.word	0x2003e350
   d430c:	2003e370 	.word	0x2003e370
   d4310:	2003e360 	.word	0x2003e360

000d4314 <_ZN14ADC_a_NeopixelC1Ev>:
 * Constructor.
 */
ADC_a_Neopixel::ADC_a_Neopixel()
{
  // be sure not to call anything that requires hardware be initialized here, put those in begin()
}
   d4314:	4770      	bx	lr
	...

000d4318 <_ZN14ADC_a_Neopixel5beginEv>:

/**
 * Example method.
 */
void ADC_a_Neopixel::begin()
{
   d4318:	b510      	push	{r4, lr}
    // initialize hardware
    Serial.println("ADC_A_NEOPIXEL begin");
   d431a:	f001 fc2f 	bl	d5b7c <_Z16_fetch_usbserialv>

    SYSTEM_MODE(AUTOMATIC);

    strip2.begin();
   d431e:	4c0b      	ldr	r4, [pc, #44]	; (d434c <_ZN14ADC_a_Neopixel5beginEv+0x34>)
 * Example method.
 */
void ADC_a_Neopixel::begin()
{
    // initialize hardware
    Serial.println("ADC_A_NEOPIXEL begin");
   d4320:	490b      	ldr	r1, [pc, #44]	; (d4350 <_ZN14ADC_a_Neopixel5beginEv+0x38>)
   d4322:	f001 fa6e 	bl	d5802 <_ZN5Print7printlnEPKc>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4326:	2001      	movs	r0, #1
   d4328:	f001 f940 	bl	d55ac <set_system_mode>

    SYSTEM_MODE(AUTOMATIC);

    strip2.begin();
   d432c:	4620      	mov	r0, r4
   d432e:	f000 f8a2 	bl	d4476 <_ZN17Adafruit_NeoPixel5beginEv>
    strip2.setBrightness(255);
   d4332:	21ff      	movs	r1, #255	; 0xff
   d4334:	4620      	mov	r0, r4
   d4336:	f000 fac7 	bl	d48c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    strip2.show();
   d433a:	4620      	mov	r0, r4
   d433c:	f000 f8d2 	bl	d44e4 <_ZN17Adafruit_NeoPixel4showEv>

    pinMode(A5, INPUT);
   d4340:	2100      	movs	r1, #0
   d4342:	200e      	movs	r0, #14
}
   d4344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    strip2.begin();
    strip2.setBrightness(255);
    strip2.show();

    pinMode(A5, INPUT);
   d4348:	f001 be88 	b.w	d605c <pinMode>
   d434c:	2003e37c 	.word	0x2003e37c
   d4350:	000d64b8 	.word	0x000d64b8

000d4354 <_GLOBAL__sub_I_strip2>:
        } while (valor < 250);

    }else {
        strip2.clear();
    }
}
   d4354:	b510      	push	{r4, lr}

#define PIXEL_PIN A1
#define PIXEL_COUNT 1
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip2 = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4356:	4c08      	ldr	r4, [pc, #32]	; (d4378 <_GLOBAL__sub_I_strip2+0x24>)
   d4358:	f000 ffc8 	bl	d52ec <HAL_Pin_Map>
   d435c:	2212      	movs	r2, #18
   d435e:	2101      	movs	r1, #1
   d4360:	4620      	mov	r0, r4
   d4362:	2302      	movs	r3, #2
   d4364:	f000 f8ac 	bl	d44c0 <_ZN17Adafruit_NeoPixelC1Ethh>
   d4368:	4620      	mov	r0, r4
   d436a:	4a04      	ldr	r2, [pc, #16]	; (d437c <_GLOBAL__sub_I_strip2+0x28>)
   d436c:	4904      	ldr	r1, [pc, #16]	; (d4380 <_GLOBAL__sub_I_strip2+0x2c>)
        } while (valor < 250);

    }else {
        strip2.clear();
    }
}
   d436e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#define PIXEL_PIN A1
#define PIXEL_COUNT 1
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip2 = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4372:	f001 bef7 	b.w	d6164 <__aeabi_atexit>
   d4376:	bf00      	nop
   d4378:	2003e37c 	.word	0x2003e37c
   d437c:	2003e338 	.word	0x2003e338
   d4380:	000d4421 	.word	0x000d4421

000d4384 <_ZN12ADC_a_SerialC1Ev>:
 * Constructor.
 */
ADC_a_Serial::ADC_a_Serial(){
  // be sure not to call anything that requires hardware be initialized here, put those in begin()

}
   d4384:	4770      	bx	lr
	...

000d4388 <_ZN12ADC_a_Serial5beginEv>:

/**
 * Example method.
 */
void ADC_a_Serial::begin()
{
   d4388:	b508      	push	{r3, lr}
    // initialize hardware
    Serial.println("ADC_A_SERIAL begin");
   d438a:	f001 fbf7 	bl	d5b7c <_Z16_fetch_usbserialv>
   d438e:	4904      	ldr	r1, [pc, #16]	; (d43a0 <_ZN12ADC_a_Serial5beginEv+0x18>)
   d4390:	f001 fa37 	bl	d5802 <_ZN5Print7printlnEPKc>

    pinMode(A5, INPUT);
   d4394:	2100      	movs	r1, #0
   d4396:	200e      	movs	r0, #14
}
   d4398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void ADC_a_Serial::begin()
{
    // initialize hardware
    Serial.println("ADC_A_SERIAL begin");

    pinMode(A5, INPUT);
   d439c:	f001 be5e 	b.w	d605c <pinMode>
   d43a0:	000d64f0 	.word	0x000d64f0

000d43a4 <_ZN12ADC_a_Serial7processEv>:

/**
 * Example method.
 */
void ADC_a_Serial::process()
{
   d43a4:	b510      	push	{r4, lr}
    // do something useful
    //Serial.println("ADC_A_SERIAL process");
    
    if(Serial.available()){
   d43a6:	f001 fbe9 	bl	d5b7c <_Z16_fetch_usbserialv>
   d43aa:	6803      	ldr	r3, [r0, #0]
   d43ac:	691b      	ldr	r3, [r3, #16]
   d43ae:	4798      	blx	r3
   d43b0:	b368      	cbz	r0, d440e <_ZN12ADC_a_Serial7processEv+0x6a>
    {
      char ch = Serial.read();
   d43b2:	f001 fbe3 	bl	d5b7c <_Z16_fetch_usbserialv>
   d43b6:	6803      	ldr	r3, [r0, #0]
      if(ch = '?'){
        analogValue = analogRead(A5);
   d43b8:	4c15      	ldr	r4, [pc, #84]	; (d4410 <_ZN12ADC_a_Serial7processEv+0x6c>)
    // do something useful
    //Serial.println("ADC_A_SERIAL process");
    
    if(Serial.available()){
    {
      char ch = Serial.read();
   d43ba:	695b      	ldr	r3, [r3, #20]
   d43bc:	4798      	blx	r3
      if(ch = '?'){
        analogValue = analogRead(A5);
   d43be:	200e      	movs	r0, #14
   d43c0:	f001 fe76 	bl	d60b0 <analogRead>
   d43c4:	6020      	str	r0, [r4, #0]

        Serial.println(analogValue);
   d43c6:	f001 fbd9 	bl	d5b7c <_Z16_fetch_usbserialv>
   d43ca:	6821      	ldr	r1, [r4, #0]
   d43cc:	220a      	movs	r2, #10
   d43ce:	f001 fa73 	bl	d58b8 <_ZN5Print7printlnEii>
        Serial.println(analogValue, DEC);
   d43d2:	f001 fbd3 	bl	d5b7c <_Z16_fetch_usbserialv>
   d43d6:	6821      	ldr	r1, [r4, #0]
   d43d8:	220a      	movs	r2, #10
   d43da:	f001 fa6d 	bl	d58b8 <_ZN5Print7printlnEii>
        Serial.println(analogValue, HEX);
   d43de:	f001 fbcd 	bl	d5b7c <_Z16_fetch_usbserialv>
   d43e2:	6821      	ldr	r1, [r4, #0]
   d43e4:	2210      	movs	r2, #16
   d43e6:	f001 fa67 	bl	d58b8 <_ZN5Print7printlnEii>
        Serial.println(analogValue, OCT);
   d43ea:	f001 fbc7 	bl	d5b7c <_Z16_fetch_usbserialv>
   d43ee:	6821      	ldr	r1, [r4, #0]
   d43f0:	2208      	movs	r2, #8
   d43f2:	f001 fa61 	bl	d58b8 <_ZN5Print7printlnEii>
        Serial.println(analogValue, BIN);
   d43f6:	f001 fbc1 	bl	d5b7c <_Z16_fetch_usbserialv>
   d43fa:	6821      	ldr	r1, [r4, #0]
   d43fc:	2202      	movs	r2, #2
   d43fe:	f001 fa5b 	bl	d58b8 <_ZN5Print7printlnEii>
        
        delay(1000);
   d4402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
      }
    }
  }
    
    //doit();
}
   d4406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.println(analogValue, DEC);
        Serial.println(analogValue, HEX);
        Serial.println(analogValue, OCT);
        Serial.println(analogValue, BIN);
        
        delay(1000);
   d440a:	f001 ba71 	b.w	d58f0 <delay>
   d440e:	bd10      	pop	{r4, pc}
   d4410:	2003e390 	.word	0x2003e390

000d4414 <_GLOBAL__sub_I_analogValue>:
   d4414:	f000 bf6a 	b.w	d52ec <HAL_Pin_Map>

000d4418 <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4418:	f000 bfb8 	b.w	d538c <HAL_Timer_Get_Micro_Seconds>

000d441c <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d441c:	f000 bfae 	b.w	d537c <HAL_Delay_Microseconds>

000d4420 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d4420:	b510      	push	{r4, lr}
   d4422:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4424:	68c0      	ldr	r0, [r0, #12]
   d4426:	b108      	cbz	r0, d442c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4428:	f001 f944 	bl	d56b4 <free>
  if (begun) pinMode(pin, INPUT);
   d442c:	7823      	ldrb	r3, [r4, #0]
   d442e:	b11b      	cbz	r3, d4438 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4430:	2100      	movs	r1, #0
   d4432:	79e0      	ldrb	r0, [r4, #7]
   d4434:	f001 fe12 	bl	d605c <pinMode>
}
   d4438:	4620      	mov	r0, r4
   d443a:	bd10      	pop	{r4, pc}

000d443c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d443c:	b538      	push	{r3, r4, r5, lr}
   d443e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4440:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4442:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4444:	b108      	cbz	r0, d444a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4446:	f001 f935 	bl	d56b4 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d444a:	79a3      	ldrb	r3, [r4, #6]
   d444c:	2b06      	cmp	r3, #6
   d444e:	bf0c      	ite	eq
   d4450:	2004      	moveq	r0, #4
   d4452:	2003      	movne	r0, #3
   d4454:	fb10 f005 	smulbb	r0, r0, r5
   d4458:	b280      	uxth	r0, r0
   d445a:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d445c:	f001 f922 	bl	d56a4 <malloc>
   d4460:	60e0      	str	r0, [r4, #12]
   d4462:	b128      	cbz	r0, d4470 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4464:	88a2      	ldrh	r2, [r4, #4]
   d4466:	2100      	movs	r1, #0
   d4468:	f001 ffe3 	bl	d6432 <memset>
    numLEDs = n;
   d446c:	8065      	strh	r5, [r4, #2]
   d446e:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4470:	80a0      	strh	r0, [r4, #4]
   d4472:	8060      	strh	r0, [r4, #2]
   d4474:	bd38      	pop	{r3, r4, r5, pc}

000d4476 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d4476:	b510      	push	{r4, lr}
   d4478:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d447a:	2101      	movs	r1, #1
   d447c:	79c0      	ldrb	r0, [r0, #7]
   d447e:	f001 fded 	bl	d605c <pinMode>
  digitalWrite(pin, LOW);
   d4482:	2100      	movs	r1, #0
   d4484:	79e0      	ldrb	r0, [r4, #7]
   d4486:	f001 fdfa 	bl	d607e <digitalWrite>
  begun = true;
   d448a:	2301      	movs	r3, #1
   d448c:	7023      	strb	r3, [r4, #0]
   d448e:	bd10      	pop	{r4, pc}

000d4490 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4490:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d4492:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4494:	4605      	mov	r5, r0
   d4496:	460c      	mov	r4, r1
    if (begun) {
   d4498:	b11b      	cbz	r3, d44a2 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d449a:	2100      	movs	r1, #0
   d449c:	79c0      	ldrb	r0, [r0, #7]
   d449e:	f001 fddd 	bl	d605c <pinMode>
    }
    pin = p;
    if (begun) {
   d44a2:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d44a4:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d44a6:	b153      	cbz	r3, d44be <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d44a8:	b2a4      	uxth	r4, r4
   d44aa:	4620      	mov	r0, r4
   d44ac:	2101      	movs	r1, #1
   d44ae:	f001 fdd5 	bl	d605c <pinMode>
        digitalWrite(p, LOW);
   d44b2:	4620      	mov	r0, r4
   d44b4:	2100      	movs	r1, #0
    }
}
   d44b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d44ba:	f001 bde0 	b.w	d607e <digitalWrite>
   d44be:	bd38      	pop	{r3, r4, r5, pc}

000d44c0 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d44c0:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d44c2:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d44c4:	4604      	mov	r4, r0
   d44c6:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d44c8:	7183      	strb	r3, [r0, #6]
   d44ca:	7005      	strb	r5, [r0, #0]
   d44cc:	7205      	strb	r5, [r0, #8]
   d44ce:	60c5      	str	r5, [r0, #12]
   d44d0:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d44d2:	f7ff ffb3 	bl	d443c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d44d6:	4620      	mov	r0, r4
   d44d8:	4631      	mov	r1, r6
   d44da:	f7ff ffd9 	bl	d4490 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d44de:	4620      	mov	r0, r4
   d44e0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d44e4 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d44e4:	68c3      	ldr	r3, [r0, #12]
   d44e6:	2b00      	cmp	r3, #0
   d44e8:	f000 818b 	beq.w	d4802 <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d44ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d44f0:	7983      	ldrb	r3, [r0, #6]
   d44f2:	3b02      	subs	r3, #2
   d44f4:	b2db      	uxtb	r3, r3
   d44f6:	2b04      	cmp	r3, #4
   d44f8:	bf9c      	itt	ls
   d44fa:	4ac4      	ldrls	r2, [pc, #784]	; (d480c <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d44fc:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4500:	b087      	sub	sp, #28
   d4502:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4504:	bf88      	it	hi
   d4506:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4508:	f7ff ff86 	bl	d4418 <micros>
   d450c:	692b      	ldr	r3, [r5, #16]
   d450e:	1ac0      	subs	r0, r0, r3
   d4510:	42a0      	cmp	r0, r4
   d4512:	d3f9      	bcc.n	d4508 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4514:	4abe      	ldr	r2, [pc, #760]	; (d4810 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4516:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4518:	ca07      	ldmia	r2, {r0, r1, r2}
   d451a:	ac06      	add	r4, sp, #24
   d451c:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4520:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4522:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4524:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4528:	3304      	adds	r3, #4
   d452a:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d452c:	b922      	cbnz	r2, d4538 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d452e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4532:	2b00      	cmp	r3, #0
   d4534:	f2c0 8155 	blt.w	d47e2 <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d4538:	9c04      	ldr	r4, [sp, #16]
   d453a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d453e:	b923      	cbnz	r3, d454a <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4540:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4544:	2b00      	cmp	r3, #0
   d4546:	f2c0 813c 	blt.w	d47c2 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d454a:	9c05      	ldr	r4, [sp, #20]
   d454c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4550:	b91b      	cbnz	r3, d455a <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4552:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4556:	2b00      	cmp	r3, #0
   d4558:	db6e      	blt.n	d4638 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d455a:	4bae      	ldr	r3, [pc, #696]	; (d4814 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d455c:	79ea      	ldrb	r2, [r5, #7]
   d455e:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4560:	4cad      	ldr	r4, [pc, #692]	; (d4818 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4562:	49ae      	ldr	r1, [pc, #696]	; (d481c <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4564:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4566:	0112      	lsls	r2, r2, #4
   d4568:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d456a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d456e:	785b      	ldrb	r3, [r3, #1]
   d4570:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4572:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4574:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4576:	f003 031f 	and.w	r3, r3, #31
   d457a:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d457e:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4580:	433a      	orrs	r2, r7
   d4582:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d4584:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4586:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4588:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d458c:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4590:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4592:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4594:	2800      	cmp	r0, #0
   d4596:	d044      	beq.n	d4622 <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d4598:	46cc      	mov	ip, r9
   d459a:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d459c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d45a0:	f81c eb01 	ldrb.w	lr, [ip], #1
   d45a4:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d45a6:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d45a8:	6863      	ldr	r3, [r4, #4]
   d45aa:	1a9b      	subs	r3, r3, r2
   d45ac:	2b46      	cmp	r3, #70	; 0x46
   d45ae:	d9fb      	bls.n	d45a8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d45b0:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d45b4:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d45b8:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d45bc:	ea43 0307 	orr.w	r3, r3, r7
   d45c0:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d45c4:	d02f      	beq.n	d4626 <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d45c6:	6863      	ldr	r3, [r4, #4]
   d45c8:	1a9b      	subs	r3, r3, r2
   d45ca:	2b28      	cmp	r3, #40	; 0x28
   d45cc:	d9fb      	bls.n	d45c6 <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d45ce:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d45d2:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d45d4:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d45d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d45dc:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d45e0:	d1e2      	bne.n	d45a8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d45e2:	ebc9 030c 	rsb	r3, r9, ip
   d45e6:	88a8      	ldrh	r0, [r5, #4]
   d45e8:	b29b      	uxth	r3, r3
   d45ea:	4298      	cmp	r0, r3
   d45ec:	d8d8      	bhi.n	d45a0 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d45ee:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d45f2:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d45f6:	6863      	ldr	r3, [r4, #4]
   d45f8:	1a9b      	subs	r3, r3, r2
   d45fa:	2b46      	cmp	r3, #70	; 0x46
   d45fc:	d9fb      	bls.n	d45f6 <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d45fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4602:	ebca 0a03 	rsb	sl, sl, r3
   d4606:	4582      	cmp	sl, r0
   d4608:	f0c0 80d5 	bcc.w	d47b6 <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d460c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4610:	f7ff ff04 	bl	d441c <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4614:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4616:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d461a:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d461e:	2800      	cmp	r0, #0
   d4620:	d1ba      	bne.n	d4598 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d4622:	4602      	mov	r2, r0
   d4624:	e7e7      	b.n	d45f6 <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4626:	6863      	ldr	r3, [r4, #4]
   d4628:	1a9b      	subs	r3, r3, r2
   d462a:	2b11      	cmp	r3, #17
   d462c:	d8cf      	bhi.n	d45ce <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d462e:	6863      	ldr	r3, [r4, #4]
   d4630:	1a9b      	subs	r3, r3, r2
   d4632:	2b11      	cmp	r3, #17
   d4634:	d9f7      	bls.n	d4626 <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d4636:	e7ca      	b.n	d45ce <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4638:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d463c:	2b00      	cmp	r3, #0
   d463e:	da8c      	bge.n	d455a <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4640:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4644:	2b00      	cmp	r3, #0
   d4646:	da88      	bge.n	d455a <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4648:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d464c:	2b00      	cmp	r3, #0
   d464e:	da84      	bge.n	d455a <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4650:	9801      	ldr	r0, [sp, #4]
   d4652:	f001 f827 	bl	d56a4 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4656:	2800      	cmp	r0, #0
   d4658:	f43f af7f 	beq.w	d455a <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d465c:	88ab      	ldrh	r3, [r5, #4]
   d465e:	2b00      	cmp	r3, #0
   d4660:	f000 80d0 	beq.w	d4804 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d4664:	2700      	movs	r7, #0
   d4666:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4668:	4e6d      	ldr	r6, [pc, #436]	; (d4820 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d466a:	496e      	ldr	r1, [pc, #440]	; (d4824 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d466c:	e000      	b.n	d4670 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d466e:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d4670:	68ea      	ldr	r2, [r5, #12]
   d4672:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4674:	f103 0e01 	add.w	lr, r3, #1
   d4678:	f012 0f80 	tst.w	r2, #128	; 0x80
   d467c:	bf14      	ite	ne
   d467e:	46b0      	movne	r8, r6
   d4680:	4688      	moveq	r8, r1
   d4682:	fa1f fe8e 	uxth.w	lr, lr
   d4686:	f012 0f40 	tst.w	r2, #64	; 0x40
   d468a:	bf14      	ite	ne
   d468c:	46b1      	movne	r9, r6
   d468e:	4689      	moveq	r9, r1
   d4690:	f012 0f20 	tst.w	r2, #32
   d4694:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d4698:	bf18      	it	ne
   d469a:	46b2      	movne	sl, r6
   d469c:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d46a0:	bf08      	it	eq
   d46a2:	468a      	moveq	sl, r1
   d46a4:	f103 0802 	add.w	r8, r3, #2
   d46a8:	f012 0f10 	tst.w	r2, #16
   d46ac:	f103 0e03 	add.w	lr, r3, #3
   d46b0:	bf14      	ite	ne
   d46b2:	46b4      	movne	ip, r6
   d46b4:	468c      	moveq	ip, r1
   d46b6:	fa1f f888 	uxth.w	r8, r8
   d46ba:	f012 0f08 	tst.w	r2, #8
   d46be:	fa1f fe8e 	uxth.w	lr, lr
   d46c2:	f103 0904 	add.w	r9, r3, #4
   d46c6:	fa1f f989 	uxth.w	r9, r9
   d46ca:	bf14      	ite	ne
   d46cc:	46b3      	movne	fp, r6
   d46ce:	468b      	moveq	fp, r1
   d46d0:	f012 0f04 	tst.w	r2, #4
   d46d4:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d46d8:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d46dc:	bf14      	ite	ne
   d46de:	46b2      	movne	sl, r6
   d46e0:	468a      	moveq	sl, r1
   d46e2:	f103 0805 	add.w	r8, r3, #5
   d46e6:	f012 0f02 	tst.w	r2, #2
   d46ea:	f103 0c06 	add.w	ip, r3, #6
   d46ee:	f103 0e07 	add.w	lr, r3, #7
   d46f2:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d46f6:	fa1f fe8e 	uxth.w	lr, lr
   d46fa:	bf14      	ite	ne
   d46fc:	46b1      	movne	r9, r6
   d46fe:	4689      	moveq	r9, r1
   d4700:	fa1f f888 	uxth.w	r8, r8
   d4704:	f012 0f01 	tst.w	r2, #1
   d4708:	fa1f fc8c 	uxth.w	ip, ip
   d470c:	bf14      	ite	ne
   d470e:	4632      	movne	r2, r6
   d4710:	460a      	moveq	r2, r1
   d4712:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4716:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d471a:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d471e:	3701      	adds	r7, #1
   d4720:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d4724:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4726:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d472a:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d472c:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d472e:	d89e      	bhi.n	d466e <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d4730:	f103 0209 	add.w	r2, r3, #9
   d4734:	330a      	adds	r3, #10
   d4736:	b292      	uxth	r2, r2
   d4738:	b29b      	uxth	r3, r3
   d473a:	0052      	lsls	r2, r2, #1
   d473c:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d473e:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4740:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d4744:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4746:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4748:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d474a:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d474c:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d474e:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4752:	4e30      	ldr	r6, [pc, #192]	; (d4814 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4754:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4758:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d475c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d4760:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4764:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4768:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d476c:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4770:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4774:	79eb      	ldrb	r3, [r5, #7]
   d4776:	6831      	ldr	r1, [r6, #0]
   d4778:	011b      	lsls	r3, r3, #4
   d477a:	18ce      	adds	r6, r1, r3
   d477c:	5cc9      	ldrb	r1, [r1, r3]
   d477e:	7873      	ldrb	r3, [r6, #1]
   d4780:	f003 031f 	and.w	r3, r3, #31
   d4784:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d4788:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d478a:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d478e:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d4792:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4796:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d4798:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d479c:	2b00      	cmp	r3, #0
   d479e:	d0fb      	beq.n	d4798 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d47a0:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d47a2:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d47a6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d47aa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d47ae:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d47b2:	f000 ff7f 	bl	d56b4 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d47b6:	f7ff fe2f 	bl	d4418 <micros>
   d47ba:	6128      	str	r0, [r5, #16]
}
   d47bc:	b007      	add	sp, #28
   d47be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47c2:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47c6:	2b00      	cmp	r3, #0
   d47c8:	f6bf aebf 	bge.w	d454a <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47cc:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47d0:	2b00      	cmp	r3, #0
   d47d2:	f6bf aeba 	bge.w	d454a <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d47d6:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47da:	2b00      	cmp	r3, #0
   d47dc:	f6bf aeb5 	bge.w	d454a <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d47e0:	e736      	b.n	d4650 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47e2:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47e6:	2b00      	cmp	r3, #0
   d47e8:	f6bf aea6 	bge.w	d4538 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47ec:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47f0:	2b00      	cmp	r3, #0
   d47f2:	f6bf aea1 	bge.w	d4538 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d47f6:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47fa:	2b00      	cmp	r3, #0
   d47fc:	f6bf ae9c 	bge.w	d4538 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d4800:	e726      	b.n	d4650 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d4802:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4804:	2304      	movs	r3, #4
   d4806:	2202      	movs	r2, #2
   d4808:	e799      	b.n	d473e <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d480a:	bf00      	nop
   d480c:	000d6510 	.word	0x000d6510
   d4810:	000d6504 	.word	0x000d6504
   d4814:	2003e394 	.word	0x2003e394
   d4818:	e000edf0 	.word	0xe000edf0
   d481c:	e0001000 	.word	0xe0001000
   d4820:	ffff800d 	.word	0xffff800d
   d4824:	ffff8006 	.word	0xffff8006

000d4828 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d4828:	8843      	ldrh	r3, [r0, #2]
   d482a:	428b      	cmp	r3, r1
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d482c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d482e:	d945      	bls.n	d48bc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d4830:	7a05      	ldrb	r5, [r0, #8]
   d4832:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d4836:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d483a:	b2d6      	uxtb	r6, r2
   d483c:	b145      	cbz	r5, d4850 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
   d483e:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d4840:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d4842:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d4844:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d4848:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d484c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d4850:	f890 c006 	ldrb.w	ip, [r0, #6]
   d4854:	68c7      	ldr	r7, [r0, #12]
   d4856:	f1bc 0f06 	cmp.w	ip, #6
   d485a:	bf0c      	ite	eq
   d485c:	2504      	moveq	r5, #4
   d485e:	2503      	movne	r5, #3
   d4860:	4369      	muls	r1, r5
   d4862:	f1bc 0f08 	cmp.w	ip, #8
   d4866:	eb07 0501 	add.w	r5, r7, r1
   d486a:	d824      	bhi.n	d48b6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
   d486c:	f04f 0e01 	mov.w	lr, #1
   d4870:	fa0e fe0c 	lsl.w	lr, lr, ip
   d4874:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
   d4878:	d10c      	bne.n	d4894 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
   d487a:	f01e 0f40 	tst.w	lr, #64	; 0x40
   d487e:	d10d      	bne.n	d489c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
   d4880:	f01e 0f10 	tst.w	lr, #16
   d4884:	d017      	beq.n	d48b6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d4886:	2bff      	cmp	r3, #255	; 0xff
   d4888:	bf08      	it	eq
   d488a:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
   d488c:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d488e:	706e      	strb	r6, [r5, #1]
          *p = g;
   d4890:	70ac      	strb	r4, [r5, #2]
        } break;
   d4892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4894:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d4896:	706b      	strb	r3, [r5, #1]
          *p = b;
   d4898:	70ae      	strb	r6, [r5, #2]
        } break;
   d489a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
   d489c:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d489e:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d48a0:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d48a2:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d48a4:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d48a6:	b90b      	cbnz	r3, d48ac <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d48a8:	b2d2      	uxtb	r2, r2
   d48aa:	e002      	b.n	d48b2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d48ac:	435a      	muls	r2, r3
   d48ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d48b2:	70ea      	strb	r2, [r5, #3]
        } break;
   d48b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d48b6:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d48b8:	706c      	strb	r4, [r5, #1]
          *p = b;
   d48ba:	70ae      	strb	r6, [r5, #2]
   d48bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d48be <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   d48be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
   d48c2:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
   d48c6:	4770      	bx	lr

000d48c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d48c8:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
   d48ca:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d48cc:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   d48ce:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   d48d0:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   d48d2:	d01e      	beq.n	d4912 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   d48d4:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d48d6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d48da:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d48dc:	d00c      	beq.n	d48f8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   d48de:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   d48e0:	bf1f      	itttt	ne
   d48e2:	0211      	lslne	r1, r2, #8
   d48e4:	f101 31ff 	addne.w	r1, r1, #4294967295
   d48e8:	fb91 f3f3 	sdivne	r3, r1, r3
   d48ec:	b29b      	uxthne	r3, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
   d48ee:	bf04      	itt	eq
   d48f0:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   d48f4:	fb91 f3f3 	sdiveq	r3, r1, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d48f8:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d48fa:	1b29      	subs	r1, r5, r4
   d48fc:	8886      	ldrh	r6, [r0, #4]
   d48fe:	b289      	uxth	r1, r1
   d4900:	428e      	cmp	r6, r1
   d4902:	d905      	bls.n	d4910 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
   d4904:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
   d4906:	4359      	muls	r1, r3
   d4908:	1209      	asrs	r1, r1, #8
   d490a:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d490e:	e7f4      	b.n	d48fa <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
   d4910:	7202      	strb	r2, [r0, #8]
   d4912:	bd70      	pop	{r4, r5, r6, pc}

000d4914 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d4914:	8882      	ldrh	r2, [r0, #4]
   d4916:	68c0      	ldr	r0, [r0, #12]
   d4918:	2100      	movs	r1, #0
   d491a:	f001 bd8a 	b.w	d6432 <memset>
	...

000d4920 <_GLOBAL__sub_I_PIN_MAP2>:
}
   d4920:	b508      	push	{r3, lr}
   d4922:	f000 fce3 	bl	d52ec <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4926:	f000 fce1 	bl	d52ec <HAL_Pin_Map>
   d492a:	4b01      	ldr	r3, [pc, #4]	; (d4930 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d492c:	6018      	str	r0, [r3, #0]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	2003e394 	.word	0x2003e394

000d4934 <_ZN17Contador_NeopixelC1Ev>:
 * Constructor.
 */
Contador_Neopixel::Contador_Neopixel()
{
  // be sure not to call anything that requires hardware be initialized here, put those in begin()
}
   d4934:	4770      	bx	lr
	...

000d4938 <_ZN17Contador_Neopixel5beginEv>:

/**
 * Example method.
 */
void Contador_Neopixel::begin()
{
   d4938:	b510      	push	{r4, lr}
    // initialize hardware
    Serial.println("CONTADOR_NEOPIXEL begin");
   d493a:	f001 f91f 	bl	d5b7c <_Z16_fetch_usbserialv>

    SYSTEM_MODE(AUTOMATIC);

    strip.begin();
   d493e:	4c09      	ldr	r4, [pc, #36]	; (d4964 <_ZN17Contador_Neopixel5beginEv+0x2c>)
 * Example method.
 */
void Contador_Neopixel::begin()
{
    // initialize hardware
    Serial.println("CONTADOR_NEOPIXEL begin");
   d4940:	4909      	ldr	r1, [pc, #36]	; (d4968 <_ZN17Contador_Neopixel5beginEv+0x30>)
   d4942:	f000 ff5e 	bl	d5802 <_ZN5Print7printlnEPKc>
   d4946:	2001      	movs	r0, #1
   d4948:	f000 fe30 	bl	d55ac <set_system_mode>

    SYSTEM_MODE(AUTOMATIC);

    strip.begin();
   d494c:	4620      	mov	r0, r4
   d494e:	f7ff fd92 	bl	d4476 <_ZN17Adafruit_NeoPixel5beginEv>
    strip.setBrightness(255);
   d4952:	4620      	mov	r0, r4
   d4954:	21ff      	movs	r1, #255	; 0xff
   d4956:	f7ff ffb7 	bl	d48c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    strip.show();
   d495a:	4620      	mov	r0, r4
}
   d495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    SYSTEM_MODE(AUTOMATIC);

    strip.begin();
    strip.setBrightness(255);
    strip.show();
   d4960:	f7ff bdc0 	b.w	d44e4 <_ZN17Adafruit_NeoPixel4showEv>
   d4964:	2003e39c 	.word	0x2003e39c
   d4968:	000d6524 	.word	0x000d6524

000d496c <_ZN17Contador_Neopixel4doitEv>:

/**
* Example private method
*/
void Contador_Neopixel::doit()
{
   d496c:	b510      	push	{r4, lr}
    Serial.println("called doit");
    strip.clear();
   d496e:	4c0d      	ldr	r4, [pc, #52]	; (d49a4 <_ZN17Contador_Neopixel4doitEv+0x38>)
/**
* Example private method
*/
void Contador_Neopixel::doit()
{
    Serial.println("called doit");
   d4970:	f001 f904 	bl	d5b7c <_Z16_fetch_usbserialv>
   d4974:	490c      	ldr	r1, [pc, #48]	; (d49a8 <_ZN17Contador_Neopixel4doitEv+0x3c>)
   d4976:	f000 ff44 	bl	d5802 <_ZN5Print7printlnEPKc>
    strip.clear();
   d497a:	4620      	mov	r0, r4
   d497c:	f7ff ffca 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
    color = strip.Color(0,0,0);
   d4980:	2200      	movs	r2, #0
   d4982:	4611      	mov	r1, r2
   d4984:	4610      	mov	r0, r2
   d4986:	f7ff ff9a 	bl	d48be <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d498a:	4b08      	ldr	r3, [pc, #32]	; (d49ac <_ZN17Contador_Neopixel4doitEv+0x40>)
   d498c:	4602      	mov	r2, r0
   d498e:	6018      	str	r0, [r3, #0]
    strip.setPixelColor(0,color);
   d4990:	2100      	movs	r1, #0
   d4992:	4620      	mov	r0, r4
   d4994:	f7ff ff48 	bl	d4828 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.show();
   d4998:	4620      	mov	r0, r4
}
   d499a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    Serial.println("called doit");
    strip.clear();
    color = strip.Color(0,0,0);
    strip.setPixelColor(0,color);
    strip.show();
   d499e:	f7ff bda1 	b.w	d44e4 <_ZN17Adafruit_NeoPixel4showEv>
   d49a2:	bf00      	nop
   d49a4:	2003e39c 	.word	0x2003e39c
   d49a8:	000d64cd 	.word	0x000d64cd
   d49ac:	2003e398 	.word	0x2003e398

000d49b0 <_ZN17Contador_Neopixel7processEv>:

/**
 * Example method.
 */
void Contador_Neopixel::process()
{
   d49b0:	b510      	push	{r4, lr}
   d49b2:	4604      	mov	r4, r0
    // do something useful
    Serial.println("CONTADOR_NEOPIXEL process");
   d49b4:	f001 f8e2 	bl	d5b7c <_Z16_fetch_usbserialv>
   d49b8:	4938      	ldr	r1, [pc, #224]	; (d4a9c <_ZN17Contador_Neopixel7processEv+0xec>)
   d49ba:	f000 ff22 	bl	d5802 <_ZN5Print7printlnEPKc>

    switch (contadorNeopixel)
   d49be:	6823      	ldr	r3, [r4, #0]
   d49c0:	2b06      	cmp	r3, #6
   d49c2:	d862      	bhi.n	d4a8a <_ZN17Contador_Neopixel7processEv+0xda>
   d49c4:	e8df f003 	tbb	[pc, r3]
   d49c8:	24190f04 	.word	0x24190f04
   d49cc:	392f      	.short	0x392f
   d49ce:	44          	.byte	0x44
   d49cf:	00          	.byte	0x00
    {
        case 0: {
            strip.setBrightness(255);
   d49d0:	21ff      	movs	r1, #255	; 0xff
   d49d2:	4833      	ldr	r0, [pc, #204]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d49d4:	f7ff ff78 	bl	d48c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
            strip.clear();
   d49d8:	4831      	ldr	r0, [pc, #196]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d49da:	f7ff ff9b 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
            color=strip.Color(0,0,255);
   d49de:	2100      	movs	r1, #0
   d49e0:	22ff      	movs	r2, #255	; 0xff
   d49e2:	4608      	mov	r0, r1
   d49e4:	e03e      	b.n	d4a64 <_ZN17Contador_Neopixel7processEv+0xb4>
            contadorNeopixel++;
            break;
        }

        case 1: {
            strip.setBrightness(255);
   d49e6:	21ff      	movs	r1, #255	; 0xff
   d49e8:	482d      	ldr	r0, [pc, #180]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d49ea:	f7ff ff6d 	bl	d48c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
            strip.clear();
   d49ee:	482c      	ldr	r0, [pc, #176]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d49f0:	f7ff ff90 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
            color=strip.Color(0,255,0);
   d49f4:	2200      	movs	r2, #0
   d49f6:	21ff      	movs	r1, #255	; 0xff
   d49f8:	e033      	b.n	d4a62 <_ZN17Contador_Neopixel7processEv+0xb2>
            contadorNeopixel++;
            break;
        }

        case 2: {
            strip.setBrightness(255);
   d49fa:	21ff      	movs	r1, #255	; 0xff
   d49fc:	4828      	ldr	r0, [pc, #160]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d49fe:	f7ff ff63 	bl	d48c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
            strip.clear();
   d4a02:	4827      	ldr	r0, [pc, #156]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d4a04:	f7ff ff86 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
            color=strip.Color(0,255,255);
   d4a08:	22ff      	movs	r2, #255	; 0xff
   d4a0a:	4611      	mov	r1, r2
   d4a0c:	2000      	movs	r0, #0
   d4a0e:	e029      	b.n	d4a64 <_ZN17Contador_Neopixel7processEv+0xb4>
            contadorNeopixel++;
            break;
        }

        case 3: {
            strip.setBrightness(255);
   d4a10:	21ff      	movs	r1, #255	; 0xff
   d4a12:	4823      	ldr	r0, [pc, #140]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d4a14:	f7ff ff58 	bl	d48c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
            strip.clear();
   d4a18:	4821      	ldr	r0, [pc, #132]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d4a1a:	f7ff ff7b 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
            color=strip.Color(255,0,0);
   d4a1e:	2200      	movs	r2, #0
   d4a20:	4611      	mov	r1, r2
   d4a22:	20ff      	movs	r0, #255	; 0xff
   d4a24:	e01e      	b.n	d4a64 <_ZN17Contador_Neopixel7processEv+0xb4>
            contadorNeopixel++;
            break;
        }

        case 4: {
            strip.setBrightness(255);
   d4a26:	21ff      	movs	r1, #255	; 0xff
   d4a28:	481d      	ldr	r0, [pc, #116]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d4a2a:	f7ff ff4d 	bl	d48c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
            strip.clear();
   d4a2e:	481c      	ldr	r0, [pc, #112]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d4a30:	f7ff ff70 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
            color=strip.Color(255,0,255);
   d4a34:	22ff      	movs	r2, #255	; 0xff
   d4a36:	2100      	movs	r1, #0
   d4a38:	e013      	b.n	d4a62 <_ZN17Contador_Neopixel7processEv+0xb2>
            contadorNeopixel++;
            break;
        }

        case 5: {
            strip.setBrightness(255);
   d4a3a:	21ff      	movs	r1, #255	; 0xff
   d4a3c:	4818      	ldr	r0, [pc, #96]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d4a3e:	f7ff ff43 	bl	d48c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
            strip.clear();
   d4a42:	4817      	ldr	r0, [pc, #92]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d4a44:	f7ff ff66 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
            color=strip.Color(255,255,0);
   d4a48:	21ff      	movs	r1, #255	; 0xff
   d4a4a:	2200      	movs	r2, #0
   d4a4c:	4608      	mov	r0, r1
   d4a4e:	e009      	b.n	d4a64 <_ZN17Contador_Neopixel7processEv+0xb4>
            contadorNeopixel++;
            break;
        }

        case 6: {
            strip.setBrightness(255);
   d4a50:	21ff      	movs	r1, #255	; 0xff
   d4a52:	4813      	ldr	r0, [pc, #76]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d4a54:	f7ff ff38 	bl	d48c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
            strip.clear();
   d4a58:	4811      	ldr	r0, [pc, #68]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d4a5a:	f7ff ff5b 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
            color=strip.Color(255,255,255);
   d4a5e:	22ff      	movs	r2, #255	; 0xff
   d4a60:	4611      	mov	r1, r2
   d4a62:	4610      	mov	r0, r2
   d4a64:	f7ff ff2b 	bl	d48be <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4a68:	4b0e      	ldr	r3, [pc, #56]	; (d4aa4 <_ZN17Contador_Neopixel7processEv+0xf4>)
   d4a6a:	4602      	mov	r2, r0
   d4a6c:	6018      	str	r0, [r3, #0]
            strip.setPixelColor(0,color);
   d4a6e:	2100      	movs	r1, #0
   d4a70:	480b      	ldr	r0, [pc, #44]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d4a72:	f7ff fed9 	bl	d4828 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
            strip.show();
   d4a76:	480a      	ldr	r0, [pc, #40]	; (d4aa0 <_ZN17Contador_Neopixel7processEv+0xf0>)
   d4a78:	f7ff fd34 	bl	d44e4 <_ZN17Adafruit_NeoPixel4showEv>
            delay(1000);
   d4a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4a80:	f000 ff36 	bl	d58f0 <delay>
            contadorNeopixel++;
   d4a84:	6823      	ldr	r3, [r4, #0]
   d4a86:	3301      	adds	r3, #1
   d4a88:	6023      	str	r3, [r4, #0]
            break;
        }
    
    }

    doit();
   d4a8a:	4620      	mov	r0, r4
   d4a8c:	f7ff ff6e 	bl	d496c <_ZN17Contador_Neopixel4doitEv>

    if(contadorNeopixel == 7){
   d4a90:	6823      	ldr	r3, [r4, #0]
   d4a92:	2b07      	cmp	r3, #7
        contadorNeopixel = 0;
   d4a94:	bf04      	itt	eq
   d4a96:	2300      	moveq	r3, #0
   d4a98:	6023      	streq	r3, [r4, #0]
   d4a9a:	bd10      	pop	{r4, pc}
   d4a9c:	000d653c 	.word	0x000d653c
   d4aa0:	2003e39c 	.word	0x2003e39c
   d4aa4:	2003e398 	.word	0x2003e398

000d4aa8 <_GLOBAL__sub_I_strip>:
    Serial.println("called doit");
    strip.clear();
    color = strip.Color(0,0,0);
    strip.setPixelColor(0,color);
    strip.show();
}
   d4aa8:	b510      	push	{r4, lr}

#define PIXEL_PIN A1
#define PIXEL_COUNT 1
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4aaa:	4c08      	ldr	r4, [pc, #32]	; (d4acc <_GLOBAL__sub_I_strip+0x24>)
   d4aac:	f000 fc1e 	bl	d52ec <HAL_Pin_Map>
   d4ab0:	2212      	movs	r2, #18
   d4ab2:	2101      	movs	r1, #1
   d4ab4:	4620      	mov	r0, r4
   d4ab6:	2302      	movs	r3, #2
   d4ab8:	f7ff fd02 	bl	d44c0 <_ZN17Adafruit_NeoPixelC1Ethh>
   d4abc:	4620      	mov	r0, r4
   d4abe:	4a04      	ldr	r2, [pc, #16]	; (d4ad0 <_GLOBAL__sub_I_strip+0x28>)
   d4ac0:	4904      	ldr	r1, [pc, #16]	; (d4ad4 <_GLOBAL__sub_I_strip+0x2c>)
    Serial.println("called doit");
    strip.clear();
    color = strip.Color(0,0,0);
    strip.setPixelColor(0,color);
    strip.show();
}
   d4ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#define PIXEL_PIN A1
#define PIXEL_COUNT 1
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4ac6:	f001 bb4d 	b.w	d6164 <__aeabi_atexit>
   d4aca:	bf00      	nop
   d4acc:	2003e39c 	.word	0x2003e39c
   d4ad0:	2003e338 	.word	0x2003e338
   d4ad4:	000d4421 	.word	0x000d4421

000d4ad8 <_ZN14Auto_IncreibleC1Ev>:
bool ida = true;

/**
 * Constructor.
 */
Auto_Increible::Auto_Increible(){}
   d4ad8:	4770      	bx	lr
	...

000d4adc <_ZN14Auto_Increible5beginEv>:

/**
 * Example method.
 */
void Auto_Increible::begin()
{
   d4adc:	b570      	push	{r4, r5, r6, lr}
   d4ade:	4605      	mov	r5, r0
    // initialize hardware
    Serial.println("AUTO_INCREIBLE begin");
   d4ae0:	f001 f84c 	bl	d5b7c <_Z16_fetch_usbserialv>
   d4ae4:	4906      	ldr	r1, [pc, #24]	; (d4b00 <_ZN14Auto_Increible5beginEv+0x24>)

    //mcp.begin(0);

    for(uint8_t i=0; i<=7; i++)
    {
        mcp.pinMode(portc[i], OUTPUT);
   d4ae6:	4e07      	ldr	r6, [pc, #28]	; (d4b04 <_ZN14Auto_Increible5beginEv+0x28>)
 * Example method.
 */
void Auto_Increible::begin()
{
    // initialize hardware
    Serial.println("AUTO_INCREIBLE begin");
   d4ae8:	f000 fe8b 	bl	d5802 <_ZN5Print7printlnEPKc>
   d4aec:	2400      	movs	r4, #0

    //mcp.begin(0);

    for(uint8_t i=0; i<=7; i++)
    {
        mcp.pinMode(portc[i], OUTPUT);
   d4aee:	5d31      	ldrb	r1, [r6, r4]
   d4af0:	2201      	movs	r2, #1
   d4af2:	4628      	mov	r0, r5
   d4af4:	3401      	adds	r4, #1
   d4af6:	f000 f927 	bl	d4d48 <_ZN17Adafruit_MCP230177pinModeEhh>
    // initialize hardware
    Serial.println("AUTO_INCREIBLE begin");

    //mcp.begin(0);

    for(uint8_t i=0; i<=7; i++)
   d4afa:	2c08      	cmp	r4, #8
   d4afc:	d1f7      	bne.n	d4aee <_ZN14Auto_Increible5beginEv+0x12>
    {
        mcp.pinMode(portc[i], OUTPUT);
    }
}
   d4afe:	bd70      	pop	{r4, r5, r6, pc}
   d4b00:	000d6556 	.word	0x000d6556
   d4b04:	2003e2c5 	.word	0x2003e2c5

000d4b08 <_ZN14Auto_Increible7processEv>:

/**
 * Example method.
 */
void Auto_Increible::process()
{
   d4b08:	b538      	push	{r3, r4, r5, lr}
   d4b0a:	4604      	mov	r4, r0
    // do something useful
    Serial.println("AUTO_INCREIBLE process");
   d4b0c:	f001 f836 	bl	d5b7c <_Z16_fetch_usbserialv>
   d4b10:	494c      	ldr	r1, [pc, #304]	; (d4c44 <_ZN14Auto_Increible7processEv+0x13c>)
   d4b12:	f000 fe76 	bl	d5802 <_ZN5Print7printlnEPKc>

    switch (contadorAuto)
   d4b16:	6863      	ldr	r3, [r4, #4]
   d4b18:	2b09      	cmp	r3, #9
   d4b1a:	f200 8092 	bhi.w	d4c42 <_ZN14Auto_Increible7processEv+0x13a>
   d4b1e:	e8df f003 	tbb	[pc, r3]
   d4b22:	1405      	.short	0x1405
   d4b24:	47392b1d 	.word	0x47392b1d
   d4b28:	816a6355 	.word	0x816a6355
    {
        case 0: {
            mcp.digitalWrite(portc[0], HIGH);
   d4b2c:	4b46      	ldr	r3, [pc, #280]	; (d4c48 <_ZN14Auto_Increible7processEv+0x140>)
   d4b2e:	2201      	movs	r2, #1
   d4b30:	7819      	ldrb	r1, [r3, #0]
   d4b32:	4620      	mov	r0, r4
   d4b34:	f000 f94d 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            delay(100);
   d4b38:	2064      	movs	r0, #100	; 0x64
   d4b3a:	f000 fed9 	bl	d58f0 <delay>
            ida = true;
   d4b3e:	4b43      	ldr	r3, [pc, #268]	; (d4c4c <_ZN14Auto_Increible7processEv+0x144>)
   d4b40:	2201      	movs	r2, #1
   d4b42:	701a      	strb	r2, [r3, #0]
            contadorAuto++;
   d4b44:	6863      	ldr	r3, [r4, #4]
   d4b46:	4413      	add	r3, r2
   d4b48:	e06a      	b.n	d4c20 <_ZN14Auto_Increible7processEv+0x118>
            break;
        }
        case 1: {
            mcp.digitalWrite(portc[0], HIGH);
   d4b4a:	4d3f      	ldr	r5, [pc, #252]	; (d4c48 <_ZN14Auto_Increible7processEv+0x140>)
   d4b4c:	2201      	movs	r2, #1
   d4b4e:	7829      	ldrb	r1, [r5, #0]
   d4b50:	4620      	mov	r0, r4
   d4b52:	f000 f93e 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            mcp.digitalWrite(portc[1], HIGH);
   d4b56:	2201      	movs	r2, #1
   d4b58:	7869      	ldrb	r1, [r5, #1]
   d4b5a:	e054      	b.n	d4c06 <_ZN14Auto_Increible7processEv+0xfe>
                contadorAuto--;
            }
            break;
        }
        case 2: {
            mcp.digitalWrite(portc[0], HIGH);
   d4b5c:	4d3a      	ldr	r5, [pc, #232]	; (d4c48 <_ZN14Auto_Increible7processEv+0x140>)
   d4b5e:	2201      	movs	r2, #1
   d4b60:	7829      	ldrb	r1, [r5, #0]
   d4b62:	4620      	mov	r0, r4
   d4b64:	f000 f935 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            mcp.digitalWrite(portc[1], HIGH);
   d4b68:	2201      	movs	r2, #1
   d4b6a:	7869      	ldrb	r1, [r5, #1]
   d4b6c:	4620      	mov	r0, r4
   d4b6e:	f000 f930 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            mcp.digitalWrite(portc[2], HIGH);
   d4b72:	2201      	movs	r2, #1
   d4b74:	78a9      	ldrb	r1, [r5, #2]
   d4b76:	e046      	b.n	d4c06 <_ZN14Auto_Increible7processEv+0xfe>
            }
            break;
        }
        case 3: {
            //mcp.digitalWrite(portc[0], LOW);
            mcp.digitalWrite(portc[1], HIGH);
   d4b78:	4d33      	ldr	r5, [pc, #204]	; (d4c48 <_ZN14Auto_Increible7processEv+0x140>)
   d4b7a:	2201      	movs	r2, #1
   d4b7c:	7869      	ldrb	r1, [r5, #1]
   d4b7e:	4620      	mov	r0, r4
   d4b80:	f000 f927 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            mcp.digitalWrite(portc[2], HIGH);
   d4b84:	2201      	movs	r2, #1
   d4b86:	78a9      	ldrb	r1, [r5, #2]
   d4b88:	4620      	mov	r0, r4
   d4b8a:	f000 f922 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            mcp.digitalWrite(portc[3], HIGH);
   d4b8e:	2201      	movs	r2, #1
   d4b90:	78e9      	ldrb	r1, [r5, #3]
   d4b92:	e038      	b.n	d4c06 <_ZN14Auto_Increible7processEv+0xfe>
            }
            break;
        }
        case 4: {
            //mcp.digitalWrite(portc[1], LOW);
            mcp.digitalWrite(portc[2], HIGH);
   d4b94:	4d2c      	ldr	r5, [pc, #176]	; (d4c48 <_ZN14Auto_Increible7processEv+0x140>)
   d4b96:	2201      	movs	r2, #1
   d4b98:	78a9      	ldrb	r1, [r5, #2]
   d4b9a:	4620      	mov	r0, r4
   d4b9c:	f000 f919 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            mcp.digitalWrite(portc[3], HIGH);
   d4ba0:	2201      	movs	r2, #1
   d4ba2:	78e9      	ldrb	r1, [r5, #3]
   d4ba4:	4620      	mov	r0, r4
   d4ba6:	f000 f914 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            mcp.digitalWrite(portc[4], HIGH);
   d4baa:	2201      	movs	r2, #1
   d4bac:	7929      	ldrb	r1, [r5, #4]
   d4bae:	e02a      	b.n	d4c06 <_ZN14Auto_Increible7processEv+0xfe>
            }
            break;
        }
        case 5: {
            //mcp.digitalWrite(portc[2], LOW);
            mcp.digitalWrite(portc[3], HIGH);
   d4bb0:	4d25      	ldr	r5, [pc, #148]	; (d4c48 <_ZN14Auto_Increible7processEv+0x140>)
   d4bb2:	2201      	movs	r2, #1
   d4bb4:	78e9      	ldrb	r1, [r5, #3]
   d4bb6:	4620      	mov	r0, r4
   d4bb8:	f000 f90b 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            mcp.digitalWrite(portc[4], HIGH);
   d4bbc:	2201      	movs	r2, #1
   d4bbe:	7929      	ldrb	r1, [r5, #4]
   d4bc0:	4620      	mov	r0, r4
   d4bc2:	f000 f906 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            mcp.digitalWrite(portc[5], HIGH);
   d4bc6:	2201      	movs	r2, #1
   d4bc8:	7969      	ldrb	r1, [r5, #5]
   d4bca:	e01c      	b.n	d4c06 <_ZN14Auto_Increible7processEv+0xfe>
            }
            break;
        }
        case 6: {
            //mcp.digitalWrite(portc[3], LOW);
            mcp.digitalWrite(portc[4], HIGH);
   d4bcc:	4d1e      	ldr	r5, [pc, #120]	; (d4c48 <_ZN14Auto_Increible7processEv+0x140>)
   d4bce:	2201      	movs	r2, #1
   d4bd0:	7929      	ldrb	r1, [r5, #4]
   d4bd2:	4620      	mov	r0, r4
   d4bd4:	f000 f8fd 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            mcp.digitalWrite(portc[5], HIGH);
   d4bd8:	2201      	movs	r2, #1
   d4bda:	7969      	ldrb	r1, [r5, #5]
   d4bdc:	4620      	mov	r0, r4
   d4bde:	f000 f8f8 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            mcp.digitalWrite(portc[6], HIGH);
   d4be2:	2201      	movs	r2, #1
   d4be4:	79a9      	ldrb	r1, [r5, #6]
   d4be6:	e00e      	b.n	d4c06 <_ZN14Auto_Increible7processEv+0xfe>
            }
            break;
        }
        case 7: {
            //mcp.digitalWrite(portc[4], LOW);
            mcp.digitalWrite(portc[5], HIGH);
   d4be8:	4d17      	ldr	r5, [pc, #92]	; (d4c48 <_ZN14Auto_Increible7processEv+0x140>)
   d4bea:	2201      	movs	r2, #1
   d4bec:	7969      	ldrb	r1, [r5, #5]
   d4bee:	4620      	mov	r0, r4
   d4bf0:	f000 f8ef 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d4bf4:	e000      	b.n	d4bf8 <_ZN14Auto_Increible7processEv+0xf0>
            }
            break;
        }
        case 8: {
            //mcp.digitalWrite(portc[5], LOW);
            mcp.digitalWrite(portc[6], HIGH);
   d4bf6:	4d14      	ldr	r5, [pc, #80]	; (d4c48 <_ZN14Auto_Increible7processEv+0x140>)
   d4bf8:	79a9      	ldrb	r1, [r5, #6]
   d4bfa:	2201      	movs	r2, #1
   d4bfc:	4620      	mov	r0, r4
   d4bfe:	f000 f8e8 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            mcp.digitalWrite(portc[7], HIGH);
   d4c02:	79e9      	ldrb	r1, [r5, #7]
   d4c04:	2201      	movs	r2, #1
   d4c06:	4620      	mov	r0, r4
   d4c08:	f000 f8e3 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            delay(100);
   d4c0c:	2064      	movs	r0, #100	; 0x64
   d4c0e:	f000 fe6f 	bl	d58f0 <delay>
            if(ida){
   d4c12:	4b0e      	ldr	r3, [pc, #56]	; (d4c4c <_ZN14Auto_Increible7processEv+0x144>)
   d4c14:	781a      	ldrb	r2, [r3, #0]
   d4c16:	6863      	ldr	r3, [r4, #4]
   d4c18:	b10a      	cbz	r2, d4c1e <_ZN14Auto_Increible7processEv+0x116>
                contadorAuto++;
   d4c1a:	3301      	adds	r3, #1
   d4c1c:	e000      	b.n	d4c20 <_ZN14Auto_Increible7processEv+0x118>
            } else {
                contadorAuto--;
   d4c1e:	3b01      	subs	r3, #1
   d4c20:	6063      	str	r3, [r4, #4]
   d4c22:	bd38      	pop	{r3, r4, r5, pc}
            }
            break;
        }
        case 9: {
            //mcp.digitalWrite(portc[6], LOW);
            mcp.digitalWrite(portc[7], HIGH);
   d4c24:	4b08      	ldr	r3, [pc, #32]	; (d4c48 <_ZN14Auto_Increible7processEv+0x140>)
   d4c26:	2201      	movs	r2, #1
   d4c28:	79d9      	ldrb	r1, [r3, #7]
   d4c2a:	4620      	mov	r0, r4
   d4c2c:	f000 f8d1 	bl	d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
            delay(100);
   d4c30:	2064      	movs	r0, #100	; 0x64
   d4c32:	f000 fe5d 	bl	d58f0 <delay>
            contadorAuto--;
   d4c36:	6863      	ldr	r3, [r4, #4]
   d4c38:	3b01      	subs	r3, #1
   d4c3a:	6063      	str	r3, [r4, #4]
            ida = false;
   d4c3c:	4b03      	ldr	r3, [pc, #12]	; (d4c4c <_ZN14Auto_Increible7processEv+0x144>)
   d4c3e:	2200      	movs	r2, #0
   d4c40:	701a      	strb	r2, [r3, #0]
   d4c42:	bd38      	pop	{r3, r4, r5, pc}
   d4c44:	000d656b 	.word	0x000d656b
   d4c48:	2003e2c5 	.word	0x2003e2c5
   d4c4c:	2003e2c4 	.word	0x2003e2c4

000d4c50 <_GLOBAL__sub_I_portc>:
   d4c50:	f000 bb4c 	b.w	d52ec <HAL_Pin_Map>

000d4c54 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d4c54:	b510      	push	{r4, lr}
   d4c56:	4604      	mov	r4, r0
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d4c58:	f001 fa64 	bl	d6124 <_Z19__fetch_global_Wirev>
   d4c5c:	6803      	ldr	r3, [r0, #0]
   d4c5e:	4621      	mov	r1, r4
   d4c60:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d4c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d4c66:	4718      	bx	r3

000d4c68 <_ZL8wirerecvv>:
#else
	Wire.send(x);
#endif
}

static inline uint8_t wirerecv(void) {
   d4c68:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d4c6a:	f001 fa5b 	bl	d6124 <_Z19__fetch_global_Wirev>
   d4c6e:	6803      	ldr	r3, [r0, #0]
   d4c70:	695b      	ldr	r3, [r3, #20]
   d4c72:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d4c74:	b2c0      	uxtb	r0, r0
   d4c76:	bd08      	pop	{r3, pc}

000d4c78 <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d4c78:	b538      	push	{r3, r4, r5, lr}
   d4c7a:	4604      	mov	r4, r0
   d4c7c:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d4c7e:	f001 fa51 	bl	d6124 <_Z19__fetch_global_Wirev>
   d4c82:	7821      	ldrb	r1, [r4, #0]
   d4c84:	f041 0120 	orr.w	r1, r1, #32
   d4c88:	f001 f85e 	bl	d5d48 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d4c8c:	4628      	mov	r0, r5
   d4c8e:	f7ff ffe1 	bl	d4c54 <_ZL8wiresendh>
	Wire.endTransmission();
   d4c92:	f001 fa47 	bl	d6124 <_Z19__fetch_global_Wirev>
   d4c96:	f001 f85e 	bl	d5d56 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d4c9a:	f001 fa43 	bl	d6124 <_Z19__fetch_global_Wirev>
   d4c9e:	7821      	ldrb	r1, [r4, #0]
   d4ca0:	2201      	movs	r2, #1
   d4ca2:	f041 0120 	orr.w	r1, r1, #32
   d4ca6:	f001 f846 	bl	d5d36 <_ZN7TwoWire11requestFromEii>
	return wirerecv();
}
   d4caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(addr);
	Wire.endTransmission();
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d4cae:	f7ff bfdb 	b.w	d4c68 <_ZL8wirerecvv>

000d4cb2 <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d4cb2:	b570      	push	{r4, r5, r6, lr}
   d4cb4:	4606      	mov	r6, r0
   d4cb6:	4614      	mov	r4, r2
   d4cb8:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d4cba:	f001 fa33 	bl	d6124 <_Z19__fetch_global_Wirev>
   d4cbe:	7831      	ldrb	r1, [r6, #0]
   d4cc0:	f041 0120 	orr.w	r1, r1, #32
   d4cc4:	f001 f840 	bl	d5d48 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d4cc8:	4628      	mov	r0, r5
   d4cca:	f7ff ffc3 	bl	d4c54 <_ZL8wiresendh>
	wiresend(regValue);
   d4cce:	4620      	mov	r0, r4
   d4cd0:	f7ff ffc0 	bl	d4c54 <_ZL8wiresendh>
	Wire.endTransmission();
   d4cd4:	f001 fa26 	bl	d6124 <_Z19__fetch_global_Wirev>
}
   d4cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(regAddr);
	wiresend(regValue);
	Wire.endTransmission();
   d4cdc:	f001 b83b 	b.w	d5d56 <_ZN7TwoWire15endTransmissionEv>

000d4ce0 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d4ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4ce4:	f89d 6018 	ldrb.w	r6, [sp, #24]

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d4ce8:	2907      	cmp	r1, #7
   d4cea:	bf98      	it	ls
   d4cec:	461e      	movls	r6, r3

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d4cee:	f001 0707 	and.w	r7, r1, #7
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d4cf2:	4690      	mov	r8, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d4cf4:	4631      	mov	r1, r6
   d4cf6:	2401      	movs	r4, #1
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d4cf8:	4605      	mov	r5, r0
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d4cfa:	40bc      	lsls	r4, r7
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d4cfc:	f7ff ffbc 	bl	d4c78 <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d4d00:	f1b8 0f00 	cmp.w	r8, #0
   d4d04:	d001      	beq.n	d4d0a <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2a>
   d4d06:	4304      	orrs	r4, r0
   d4d08:	e001      	b.n	d4d0e <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2e>
   d4d0a:	ea20 0404 	bic.w	r4, r0, r4
   d4d0e:	b2e2      	uxtb	r2, r4

	writeRegister(regAddr,regValue);
   d4d10:	4631      	mov	r1, r6
   d4d12:	4628      	mov	r0, r5
}
   d4d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);

	writeRegister(regAddr,regValue);
   d4d18:	f7ff bfcb 	b.w	d4cb2 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d4d1c <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d4d1c:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d4d1e:	2907      	cmp	r1, #7
   d4d20:	bf28      	it	cs
   d4d22:	2107      	movcs	r1, #7
   d4d24:	7001      	strb	r1, [r0, #0]
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d4d26:	4604      	mov	r4, r0
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;

	Wire.begin();
   d4d28:	f001 f9fc 	bl	d6124 <_Z19__fetch_global_Wirev>
   d4d2c:	f000 fff4 	bl	d5d18 <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d4d30:	4620      	mov	r0, r4
   d4d32:	22ff      	movs	r2, #255	; 0xff
   d4d34:	2100      	movs	r1, #0
   d4d36:	f7ff ffbc 	bl	d4cb2 <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	22ff      	movs	r2, #255	; 0xff
   d4d3e:	2101      	movs	r1, #1
}
   d4d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Wire.begin();

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
	writeRegister(MCP23017_IODIRB,0xff);
   d4d44:	f7ff bfb5 	b.w	d4cb2 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d4d48 <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d4d48:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d4d4a:	2301      	movs	r3, #1
   d4d4c:	fab2 f282 	clz	r2, r2
   d4d50:	9300      	str	r3, [sp, #0]
   d4d52:	0952      	lsrs	r2, r2, #5
   d4d54:	2300      	movs	r3, #0
   d4d56:	f7ff ffc3 	bl	d4ce0 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d4d5a:	b003      	add	sp, #12
   d4d5c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4d60 <_ZN17Adafruit_MCP230178readGPIOEh>:

/**
 * Read a single port, A or B, and return its current 8 bit value.
 * Parameter b should be 0 for GPIOA, and 1 for GPIOB.
 */
uint8_t Adafruit_MCP23017::readGPIO(uint8_t b) {
   d4d60:	b538      	push	{r3, r4, r5, lr}
   d4d62:	4604      	mov	r4, r0
   d4d64:	460d      	mov	r5, r1

	// read the current GPIO output latches
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d4d66:	f001 f9dd 	bl	d6124 <_Z19__fetch_global_Wirev>
   d4d6a:	7821      	ldrb	r1, [r4, #0]
   d4d6c:	f041 0120 	orr.w	r1, r1, #32
   d4d70:	f000 ffea 	bl	d5d48 <_ZN7TwoWire17beginTransmissionEi>
	if (b == 0)
   d4d74:	b90d      	cbnz	r5, d4d7a <_ZN17Adafruit_MCP230178readGPIOEh+0x1a>
		wiresend(MCP23017_GPIOA);
   d4d76:	2012      	movs	r0, #18
   d4d78:	e000      	b.n	d4d7c <_ZN17Adafruit_MCP230178readGPIOEh+0x1c>
	else {
		wiresend(MCP23017_GPIOB);
   d4d7a:	2013      	movs	r0, #19
   d4d7c:	f7ff ff6a 	bl	d4c54 <_ZL8wiresendh>
	}
	Wire.endTransmission();
   d4d80:	f001 f9d0 	bl	d6124 <_Z19__fetch_global_Wirev>
   d4d84:	f000 ffe7 	bl	d5d56 <_ZN7TwoWire15endTransmissionEv>

	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d4d88:	f001 f9cc 	bl	d6124 <_Z19__fetch_global_Wirev>
   d4d8c:	7821      	ldrb	r1, [r4, #0]
   d4d8e:	2201      	movs	r2, #1
   d4d90:	f041 0120 	orr.w	r1, r1, #32
   d4d94:	f000 ffcf 	bl	d5d36 <_ZN7TwoWire11requestFromEii>
	return wirerecv();
}
   d4d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		wiresend(MCP23017_GPIOB);
	}
	Wire.endTransmission();

	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d4d9c:	f7ff bf64 	b.w	d4c68 <_ZL8wirerecvv>

000d4da0 <_ZN17Adafruit_MCP2301711writeGPIOABEt>:
}

/**
 * Writes all the pins in one go. This method is very useful if you are implementing a multiplexed matrix and want to get a decent refresh rate.
 */
void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
   d4da0:	b538      	push	{r3, r4, r5, lr}
   d4da2:	4605      	mov	r5, r0
   d4da4:	460c      	mov	r4, r1
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d4da6:	f001 f9bd 	bl	d6124 <_Z19__fetch_global_Wirev>
   d4daa:	7829      	ldrb	r1, [r5, #0]
   d4dac:	f041 0120 	orr.w	r1, r1, #32
   d4db0:	f000 ffca 	bl	d5d48 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(MCP23017_GPIOA);
   d4db4:	2012      	movs	r0, #18
   d4db6:	f7ff ff4d 	bl	d4c54 <_ZL8wiresendh>
	wiresend(ba & 0xFF);
   d4dba:	b2e0      	uxtb	r0, r4
   d4dbc:	f7ff ff4a 	bl	d4c54 <_ZL8wiresendh>
	wiresend(ba >> 8);
   d4dc0:	0a20      	lsrs	r0, r4, #8
   d4dc2:	f7ff ff47 	bl	d4c54 <_ZL8wiresendh>
	Wire.endTransmission();
   d4dc6:	f001 f9ad 	bl	d6124 <_Z19__fetch_global_Wirev>
}
   d4dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(MCP23017_GPIOA);
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
   d4dce:	f000 bfc2 	b.w	d5d56 <_ZN7TwoWire15endTransmissionEv>

000d4dd2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d4dd2:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d4dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d4dd6:	f001 0607 	and.w	r6, r1, #7
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d4dda:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d4ddc:	bf34      	ite	cc
   d4dde:	2114      	movcc	r1, #20
   d4de0:	2115      	movcs	r1, #21
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d4de2:	4605      	mov	r5, r0
   d4de4:	4617      	mov	r7, r2
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d4de6:	f7ff ff47 	bl	d4c78 <_ZN17Adafruit_MCP2301712readRegisterEh>
   d4dea:	2301      	movs	r3, #1

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d4dec:	40b3      	lsls	r3, r6
   d4dee:	b10f      	cbz	r7, d4df4 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x22>
   d4df0:	4303      	orrs	r3, r0
   d4df2:	e001      	b.n	d4df8 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
   d4df4:	ea20 0303 	bic.w	r3, r0, r3

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d4df8:	2c08      	cmp	r4, #8
	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d4dfa:	b2da      	uxtb	r2, r3

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d4dfc:	4628      	mov	r0, r5
   d4dfe:	bf34      	ite	cc
   d4e00:	2112      	movcc	r1, #18
   d4e02:	2113      	movcs	r1, #19
}
   d4e04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// set the pin and direction
	bitWrite(gpio,bit,d);

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d4e08:	f7ff bf53 	b.w	d4cb2 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d4e0c <_GLOBAL__sub_I__ZN17Adafruit_MCP230179bitForPinEh>:
   d4e0c:	f000 ba6e 	b.w	d52ec <HAL_Pin_Map>

000d4e10 <_ZN9ADC_a_RGBC1Ev>:
int analogValue3 = 0;

/**
 * Constructor.
 */
ADC_a_RGB::ADC_a_RGB()
   d4e10:	2107      	movs	r1, #7
   d4e12:	2206      	movs	r2, #6
   d4e14:	f04f 0c05 	mov.w	ip, #5
   d4e18:	e880 1006 	stmia.w	r0, {r1, r2, ip}
{
  // be sure not to call anything that requires hardware be initialized here, put those in begin()
}
   d4e1c:	4770      	bx	lr
	...

000d4e20 <_ZN9ADC_a_RGB5beginEiii>:

/**
 * Example method.
 */
void ADC_a_RGB::begin(int r, int g, int b)
{
   d4e20:	b570      	push	{r4, r5, r6, lr}
   d4e22:	4615      	mov	r5, r2
   d4e24:	461c      	mov	r4, r3
   d4e26:	460e      	mov	r6, r1
    // initialize hardware
    Serial.println("ADC_A_RGB begin");
   d4e28:	f000 fea8 	bl	d5b7c <_Z16_fetch_usbserialv>
   d4e2c:	4908      	ldr	r1, [pc, #32]	; (d4e50 <_ZN9ADC_a_RGB5beginEiii+0x30>)
   d4e2e:	f000 fce8 	bl	d5802 <_ZN5Print7printlnEPKc>

    pinMode(r, OUTPUT);
   d4e32:	b2b0      	uxth	r0, r6
   d4e34:	2101      	movs	r1, #1
   d4e36:	f001 f911 	bl	d605c <pinMode>
    pinMode(g, OUTPUT);
   d4e3a:	b2a8      	uxth	r0, r5
   d4e3c:	2101      	movs	r1, #1
   d4e3e:	f001 f90d 	bl	d605c <pinMode>
    pinMode(b, OUTPUT);
   d4e42:	b2a0      	uxth	r0, r4
   d4e44:	2101      	movs	r1, #1
}
   d4e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    // initialize hardware
    Serial.println("ADC_A_RGB begin");

    pinMode(r, OUTPUT);
    pinMode(g, OUTPUT);
    pinMode(b, OUTPUT);
   d4e4a:	f001 b907 	b.w	d605c <pinMode>
   d4e4e:	bf00      	nop
   d4e50:	000d6593 	.word	0x000d6593

000d4e54 <_ZN9ADC_a_RGB7processEiii>:

/**
 * Example method.
 */
void ADC_a_RGB::process(int Red, int Green, int Blue)
{
   d4e54:	b570      	push	{r4, r5, r6, lr}
   d4e56:	4616      	mov	r6, r2
   d4e58:	461c      	mov	r4, r3
   d4e5a:	460d      	mov	r5, r1
    // do something useful
    Serial.println("ADC_A_RGB process");
   d4e5c:	f000 fe8e 	bl	d5b7c <_Z16_fetch_usbserialv>
   d4e60:	494c      	ldr	r1, [pc, #304]	; (d4f94 <_ZN9ADC_a_RGB7processEiii+0x140>)
   d4e62:	f000 fcce 	bl	d5802 <_ZN5Print7printlnEPKc>

    analogValue3 = analogRead(A5);
   d4e66:	200e      	movs	r0, #14
   d4e68:	f001 f922 	bl	d60b0 <analogRead>
   d4e6c:	4b4a      	ldr	r3, [pc, #296]	; (d4f98 <_ZN9ADC_a_RGB7processEiii+0x144>)

    if(analogValue3 > 0 && analogValue3 < 584){
   d4e6e:	1e42      	subs	r2, r0, #1
void ADC_a_RGB::process(int Red, int Green, int Blue)
{
    // do something useful
    Serial.println("ADC_A_RGB process");

    analogValue3 = analogRead(A5);
   d4e70:	6018      	str	r0, [r3, #0]

    if(analogValue3 > 0 && analogValue3 < 584){
   d4e72:	f240 2346 	movw	r3, #582	; 0x246
   d4e76:	429a      	cmp	r2, r3
   d4e78:	d809      	bhi.n	d4e8e <_ZN9ADC_a_RGB7processEiii+0x3a>
        digitalWrite(Blue, HIGH);
   d4e7a:	b2a4      	uxth	r4, r4
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	2101      	movs	r1, #1
   d4e80:	f001 f8fd 	bl	d607e <digitalWrite>
        delay(1000);
   d4e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4e88:	f000 fd32 	bl	d58f0 <delay>
   d4e8c:	e07b      	b.n	d4f86 <_ZN9ADC_a_RGB7processEiii+0x132>
        digitalWrite(Blue, LOW);
    } else if(analogValue3 >= 584 && analogValue3 < 1752){
   d4e8e:	f5a0 7312 	sub.w	r3, r0, #584	; 0x248
   d4e92:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
   d4e96:	d209      	bcs.n	d4eac <_ZN9ADC_a_RGB7processEiii+0x58>
        digitalWrite(Green, HIGH);
   d4e98:	b2b6      	uxth	r6, r6
   d4e9a:	4630      	mov	r0, r6
   d4e9c:	2101      	movs	r1, #1
   d4e9e:	f001 f8ee 	bl	d607e <digitalWrite>
        delay(1000);
   d4ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4ea6:	f000 fd23 	bl	d58f0 <delay>
   d4eaa:	e052      	b.n	d4f52 <_ZN9ADC_a_RGB7processEiii+0xfe>
        digitalWrite(Green, LOW);
    } else if(analogValue3 >= 1752 && analogValue3 < 2336){
   d4eac:	f5a0 63db 	sub.w	r3, r0, #1752	; 0x6d8
   d4eb0:	f5b3 7f12 	cmp.w	r3, #584	; 0x248
   d4eb4:	d210      	bcs.n	d4ed8 <_ZN9ADC_a_RGB7processEiii+0x84>
        digitalWrite(Blue, HIGH);
   d4eb6:	b2a4      	uxth	r4, r4
   d4eb8:	2101      	movs	r1, #1
   d4eba:	4620      	mov	r0, r4
        digitalWrite(Green, HIGH);
   d4ebc:	b2b6      	uxth	r6, r6
    } else if(analogValue3 >= 584 && analogValue3 < 1752){
        digitalWrite(Green, HIGH);
        delay(1000);
        digitalWrite(Green, LOW);
    } else if(analogValue3 >= 1752 && analogValue3 < 2336){
        digitalWrite(Blue, HIGH);
   d4ebe:	f001 f8de 	bl	d607e <digitalWrite>
        digitalWrite(Green, HIGH);
   d4ec2:	2101      	movs	r1, #1
   d4ec4:	4630      	mov	r0, r6
   d4ec6:	f001 f8da 	bl	d607e <digitalWrite>
        delay(1000);
   d4eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4ece:	f000 fd0f 	bl	d58f0 <delay>
        digitalWrite(Blue, LOW);
   d4ed2:	2100      	movs	r1, #0
   d4ed4:	4620      	mov	r0, r4
   d4ed6:	e03a      	b.n	d4f4e <_ZN9ADC_a_RGB7processEiii+0xfa>
        digitalWrite(Green, LOW);
    } else if(analogValue3 >= 2336 && analogValue3 < 2920){
   d4ed8:	f5a0 6312 	sub.w	r3, r0, #2336	; 0x920
   d4edc:	f5b3 7f12 	cmp.w	r3, #584	; 0x248
   d4ee0:	b2ad      	uxth	r5, r5
   d4ee2:	d20a      	bcs.n	d4efa <_ZN9ADC_a_RGB7processEiii+0xa6>
        digitalWrite(Red, HIGH);
   d4ee4:	2101      	movs	r1, #1
   d4ee6:	4628      	mov	r0, r5
   d4ee8:	f001 f8c9 	bl	d607e <digitalWrite>
        delay(1000);
   d4eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4ef0:	f000 fcfe 	bl	d58f0 <delay>
        digitalWrite(Red, LOW);
   d4ef4:	2100      	movs	r1, #0
   d4ef6:	4628      	mov	r0, r5
   d4ef8:	e047      	b.n	d4f8a <_ZN9ADC_a_RGB7processEiii+0x136>
    } else if(analogValue3 >= 2920 && analogValue3 < 3504){
   d4efa:	f6a0 3368 	subw	r3, r0, #2920	; 0xb68
   d4efe:	f5b3 7f12 	cmp.w	r3, #584	; 0x248
   d4f02:	d20f      	bcs.n	d4f24 <_ZN9ADC_a_RGB7processEiii+0xd0>
        digitalWrite(Red, HIGH);
   d4f04:	2101      	movs	r1, #1
   d4f06:	4628      	mov	r0, r5
        digitalWrite(Blue, HIGH);
   d4f08:	b2a4      	uxth	r4, r4
    } else if(analogValue3 >= 2336 && analogValue3 < 2920){
        digitalWrite(Red, HIGH);
        delay(1000);
        digitalWrite(Red, LOW);
    } else if(analogValue3 >= 2920 && analogValue3 < 3504){
        digitalWrite(Red, HIGH);
   d4f0a:	f001 f8b8 	bl	d607e <digitalWrite>
        digitalWrite(Blue, HIGH);
   d4f0e:	2101      	movs	r1, #1
   d4f10:	4620      	mov	r0, r4
   d4f12:	f001 f8b4 	bl	d607e <digitalWrite>
        delay(1000);
   d4f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4f1a:	f000 fce9 	bl	d58f0 <delay>
        digitalWrite(Red, LOW);
   d4f1e:	2100      	movs	r1, #0
   d4f20:	4628      	mov	r0, r5
   d4f22:	e02e      	b.n	d4f82 <_ZN9ADC_a_RGB7processEiii+0x12e>
        digitalWrite(Blue, LOW);
    } else if(analogValue3 >= 3504 && analogValue3 < 4088){
   d4f24:	f5a0 605b 	sub.w	r0, r0, #3504	; 0xdb0
   d4f28:	f5b0 7f12 	cmp.w	r0, #584	; 0x248
        digitalWrite(Red, HIGH);
   d4f2c:	f04f 0101 	mov.w	r1, #1
   d4f30:	b2b6      	uxth	r6, r6
   d4f32:	4628      	mov	r0, r5
        digitalWrite(Red, HIGH);
        digitalWrite(Blue, HIGH);
        delay(1000);
        digitalWrite(Red, LOW);
        digitalWrite(Blue, LOW);
    } else if(analogValue3 >= 3504 && analogValue3 < 4088){
   d4f34:	d210      	bcs.n	d4f58 <_ZN9ADC_a_RGB7processEiii+0x104>
        digitalWrite(Red, HIGH);
   d4f36:	f001 f8a2 	bl	d607e <digitalWrite>
        digitalWrite(Green, HIGH);
   d4f3a:	2101      	movs	r1, #1
   d4f3c:	4630      	mov	r0, r6
   d4f3e:	f001 f89e 	bl	d607e <digitalWrite>
        delay(1000);
   d4f42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4f46:	f000 fcd3 	bl	d58f0 <delay>
        digitalWrite(Red, LOW);
   d4f4a:	2100      	movs	r1, #0
   d4f4c:	4628      	mov	r0, r5
   d4f4e:	f001 f896 	bl	d607e <digitalWrite>
        digitalWrite(Green, LOW);
   d4f52:	2100      	movs	r1, #0
   d4f54:	4630      	mov	r0, r6
   d4f56:	e018      	b.n	d4f8a <_ZN9ADC_a_RGB7processEiii+0x136>
    } else {
        digitalWrite(Red, HIGH);
   d4f58:	f001 f891 	bl	d607e <digitalWrite>
        digitalWrite(Green, HIGH);
        digitalWrite(Blue, HIGH);
   d4f5c:	b2a4      	uxth	r4, r4
        delay(1000);
        digitalWrite(Red, LOW);
        digitalWrite(Green, LOW);
    } else {
        digitalWrite(Red, HIGH);
        digitalWrite(Green, HIGH);
   d4f5e:	2101      	movs	r1, #1
   d4f60:	4630      	mov	r0, r6
   d4f62:	f001 f88c 	bl	d607e <digitalWrite>
        digitalWrite(Blue, HIGH);
   d4f66:	2101      	movs	r1, #1
   d4f68:	4620      	mov	r0, r4
   d4f6a:	f001 f888 	bl	d607e <digitalWrite>
        delay(1000);
   d4f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4f72:	f000 fcbd 	bl	d58f0 <delay>
        digitalWrite(Red, LOW);
   d4f76:	2100      	movs	r1, #0
   d4f78:	4628      	mov	r0, r5
   d4f7a:	f001 f880 	bl	d607e <digitalWrite>
        digitalWrite(Green, LOW);
   d4f7e:	2100      	movs	r1, #0
   d4f80:	4630      	mov	r0, r6
   d4f82:	f001 f87c 	bl	d607e <digitalWrite>
        digitalWrite(Blue, LOW);
   d4f86:	2100      	movs	r1, #0
   d4f88:	4620      	mov	r0, r4
    }
    
    //doit();
}
   d4f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        digitalWrite(Green, HIGH);
        digitalWrite(Blue, HIGH);
        delay(1000);
        digitalWrite(Red, LOW);
        digitalWrite(Green, LOW);
        digitalWrite(Blue, LOW);
   d4f8e:	f001 b876 	b.w	d607e <digitalWrite>
   d4f92:	bf00      	nop
   d4f94:	000d65a3 	.word	0x000d65a3
   d4f98:	2003e3b0 	.word	0x2003e3b0

000d4f9c <_GLOBAL__sub_I_analogValue3>:
   d4f9c:	f000 b9a6 	b.w	d52ec <HAL_Pin_Map>

000d4fa0 <_ZN16Contador_BinarioC1Ei>:
 */
Contador_Binario::Contador_Binario(int Contador)
{
    // be sure not to call anything that requires hardware be initialized here, put those in begin()
    Contador = contador;
}
   d4fa0:	4770      	bx	lr
	...

000d4fa4 <_ZN16Contador_Binario5beginEv>:

/**
 * Example method.
 */
void Contador_Binario::begin()
{
   d4fa4:	b508      	push	{r3, lr}
    // initialize hardware
    Serial.println("CONTADOR_BINARIO begin");
   d4fa6:	f000 fde9 	bl	d5b7c <_Z16_fetch_usbserialv>
   d4faa:	4902      	ldr	r1, [pc, #8]	; (d4fb4 <_ZN16Contador_Binario5beginEv+0x10>)
}
   d4fac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * Example method.
 */
void Contador_Binario::begin()
{
    // initialize hardware
    Serial.println("CONTADOR_BINARIO begin");
   d4fb0:	f000 bc27 	b.w	d5802 <_ZN5Print7printlnEPKc>
   d4fb4:	000d65b5 	.word	0x000d65b5

000d4fb8 <_ZN16Contador_Binario7processEv>:

/**
 * Example method.
 */
void Contador_Binario::process()
{
   d4fb8:	b510      	push	{r4, lr}
    // do something useful
    //Serial.println("CONTADOR_BINARIO process");

    //Serial.println("" + contador);
    contador++;
   d4fba:	6841      	ldr	r1, [r0, #4]
   d4fbc:	3101      	adds	r1, #1
   d4fbe:	6041      	str	r1, [r0, #4]
    mcp.writeGPIOAB(contador);
   d4fc0:	b289      	uxth	r1, r1

/**
 * Example method.
 */
void Contador_Binario::process()
{
   d4fc2:	4604      	mov	r4, r0
    // do something useful
    //Serial.println("CONTADOR_BINARIO process");

    //Serial.println("" + contador);
    contador++;
    mcp.writeGPIOAB(contador);
   d4fc4:	f7ff feec 	bl	d4da0 <_ZN17Adafruit_MCP2301711writeGPIOABEt>
    delay(250);
   d4fc8:	20fa      	movs	r0, #250	; 0xfa
   d4fca:	f000 fc91 	bl	d58f0 <delay>
    mcp.writeGPIOAB(0);
   d4fce:	4620      	mov	r0, r4
   d4fd0:	2100      	movs	r1, #0

    //doit();
}
   d4fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    //Serial.println("" + contador);
    contador++;
    mcp.writeGPIOAB(contador);
    delay(250);
    mcp.writeGPIOAB(0);
   d4fd6:	f7ff bee3 	b.w	d4da0 <_ZN17Adafruit_MCP2301711writeGPIOABEt>

000d4fda <_GLOBAL__sub_I__ZN16Contador_BinarioC2Ei>:
   d4fda:	f000 b987 	b.w	d52ec <HAL_Pin_Map>

000d4fde <_ZN12Contador_RGBC1Ev>:
int contadorRGB = 0;

/**
 * Constructor.
 */
Contador_RGB::Contador_RGB()
   d4fde:	2107      	movs	r1, #7
   d4fe0:	2206      	movs	r2, #6
   d4fe2:	f04f 0c05 	mov.w	ip, #5
   d4fe6:	e880 1006 	stmia.w	r0, {r1, r2, ip}
{
    // be sure not to call anything that requires hardware be initialized here, put those in begin()
}
   d4fea:	4770      	bx	lr

000d4fec <_ZN12Contador_RGB5beginEiii>:

/**
 * Example method.
 */
void Contador_RGB::begin(int r, int g, int b)
{
   d4fec:	b570      	push	{r4, r5, r6, lr}
   d4fee:	4615      	mov	r5, r2
   d4ff0:	461c      	mov	r4, r3
   d4ff2:	460e      	mov	r6, r1
    // initialize hardware
    Serial.println("CONTADOR_RGB begin");
   d4ff4:	f000 fdc2 	bl	d5b7c <_Z16_fetch_usbserialv>
   d4ff8:	4908      	ldr	r1, [pc, #32]	; (d501c <_ZN12Contador_RGB5beginEiii+0x30>)
   d4ffa:	f000 fc02 	bl	d5802 <_ZN5Print7printlnEPKc>

    pinMode(r, OUTPUT);
   d4ffe:	b2b0      	uxth	r0, r6
   d5000:	2101      	movs	r1, #1
   d5002:	f001 f82b 	bl	d605c <pinMode>
    pinMode(g, OUTPUT);
   d5006:	b2a8      	uxth	r0, r5
   d5008:	2101      	movs	r1, #1
   d500a:	f001 f827 	bl	d605c <pinMode>
    pinMode(b, OUTPUT);
   d500e:	b2a0      	uxth	r0, r4
   d5010:	2101      	movs	r1, #1
}
   d5012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    // initialize hardware
    Serial.println("CONTADOR_RGB begin");

    pinMode(r, OUTPUT);
    pinMode(g, OUTPUT);
    pinMode(b, OUTPUT);
   d5016:	f001 b821 	b.w	d605c <pinMode>
   d501a:	bf00      	nop
   d501c:	000d65cc 	.word	0x000d65cc

000d5020 <_ZN12Contador_RGB4doitEv>:

/**
* Example private method
*/
void Contador_RGB::doit()
{
   d5020:	b510      	push	{r4, lr}
   d5022:	4604      	mov	r4, r0
    Serial.println("called doit");
   d5024:	f000 fdaa 	bl	d5b7c <_Z16_fetch_usbserialv>
   d5028:	4902      	ldr	r1, [pc, #8]	; (d5034 <_ZN12Contador_RGB4doitEv+0x14>)
   d502a:	f000 fbea 	bl	d5802 <_ZN5Print7printlnEPKc>
    contadorRGB = 0;
   d502e:	2300      	movs	r3, #0
   d5030:	60e3      	str	r3, [r4, #12]
   d5032:	bd10      	pop	{r4, pc}
   d5034:	000d64cd 	.word	0x000d64cd

000d5038 <_ZN12Contador_RGB7processEiii>:

/**
 * Example method.
 */
void Contador_RGB::process(int Red, int Green, int Blue)
{
   d5038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d503a:	4604      	mov	r4, r0
   d503c:	461d      	mov	r5, r3
   d503e:	460f      	mov	r7, r1
   d5040:	4616      	mov	r6, r2
    // do something useful
    Serial.println("CONTADOR_RGB process");
   d5042:	f000 fd9b 	bl	d5b7c <_Z16_fetch_usbserialv>
   d5046:	4947      	ldr	r1, [pc, #284]	; (d5164 <_ZN12Contador_RGB7processEiii+0x12c>)
   d5048:	f000 fbdb 	bl	d5802 <_ZN5Print7printlnEPKc>

    switch(contadorRGB){
   d504c:	68e3      	ldr	r3, [r4, #12]
   d504e:	2b06      	cmp	r3, #6
   d5050:	d87e      	bhi.n	d5150 <_ZN12Contador_RGB7processEiii+0x118>
   d5052:	e8df f003 	tbb	[pc, r3]
   d5056:	0e04      	.short	0x0e04
   d5058:	46352918 	.word	0x46352918
   d505c:	5b          	.byte	0x5b
   d505d:	00          	.byte	0x00
        case 0: {
            digitalWrite(Blue, HIGH);
   d505e:	b2ad      	uxth	r5, r5
   d5060:	4628      	mov	r0, r5
   d5062:	2101      	movs	r1, #1
   d5064:	f001 f80b 	bl	d607e <digitalWrite>
            delay(1000);
   d5068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d506c:	f000 fc40 	bl	d58f0 <delay>
   d5070:	e067      	b.n	d5142 <_ZN12Contador_RGB7processEiii+0x10a>
            contadorRGB++;
            break;
        }

        case 1: {
            digitalWrite(Green, HIGH);
   d5072:	b2b6      	uxth	r6, r6
   d5074:	4630      	mov	r0, r6
   d5076:	2101      	movs	r1, #1
   d5078:	f001 f801 	bl	d607e <digitalWrite>
            delay(1000);
   d507c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5080:	f000 fc36 	bl	d58f0 <delay>
   d5084:	e03f      	b.n	d5106 <_ZN12Contador_RGB7processEiii+0xce>
            contadorRGB++;
            break;
        }

        case 2: {
            digitalWrite(Blue, HIGH);
   d5086:	b2ad      	uxth	r5, r5
   d5088:	2101      	movs	r1, #1
   d508a:	4628      	mov	r0, r5
            digitalWrite(Green, HIGH);
   d508c:	b2b6      	uxth	r6, r6
            contadorRGB++;
            break;
        }

        case 2: {
            digitalWrite(Blue, HIGH);
   d508e:	f000 fff6 	bl	d607e <digitalWrite>
            digitalWrite(Green, HIGH);
   d5092:	2101      	movs	r1, #1
   d5094:	4630      	mov	r0, r6
   d5096:	f000 fff2 	bl	d607e <digitalWrite>
            delay(1000);
   d509a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d509e:	f000 fc27 	bl	d58f0 <delay>
            digitalWrite(Blue, LOW);
   d50a2:	2100      	movs	r1, #0
   d50a4:	4628      	mov	r0, r5
   d50a6:	e02c      	b.n	d5102 <_ZN12Contador_RGB7processEiii+0xca>
            contadorRGB++;
            break;
        }

        case 3: {
            digitalWrite(Red, HIGH);
   d50a8:	b2bf      	uxth	r7, r7
   d50aa:	2101      	movs	r1, #1
   d50ac:	4638      	mov	r0, r7
   d50ae:	f000 ffe6 	bl	d607e <digitalWrite>
            delay(1000);
   d50b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d50b6:	f000 fc1b 	bl	d58f0 <delay>
            digitalWrite(Red, LOW);
   d50ba:	2100      	movs	r1, #0
   d50bc:	4638      	mov	r0, r7
   d50be:	e042      	b.n	d5146 <_ZN12Contador_RGB7processEiii+0x10e>
            contadorRGB++;
            break;
        }

        case 4: {
            digitalWrite(Red, HIGH);
   d50c0:	b2bf      	uxth	r7, r7
   d50c2:	2101      	movs	r1, #1
   d50c4:	4638      	mov	r0, r7
            digitalWrite(Blue, HIGH);
   d50c6:	b2ad      	uxth	r5, r5
            contadorRGB++;
            break;
        }

        case 4: {
            digitalWrite(Red, HIGH);
   d50c8:	f000 ffd9 	bl	d607e <digitalWrite>
            digitalWrite(Blue, HIGH);
   d50cc:	2101      	movs	r1, #1
   d50ce:	4628      	mov	r0, r5
   d50d0:	f000 ffd5 	bl	d607e <digitalWrite>
            delay(1000);
   d50d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d50d8:	f000 fc0a 	bl	d58f0 <delay>
            digitalWrite(Red, LOW);
   d50dc:	2100      	movs	r1, #0
   d50de:	4638      	mov	r0, r7
   d50e0:	e02d      	b.n	d513e <_ZN12Contador_RGB7processEiii+0x106>
            contadorRGB++;
            break;
        }

        case 5: {
            digitalWrite(Red, HIGH);
   d50e2:	b2bf      	uxth	r7, r7
   d50e4:	2101      	movs	r1, #1
   d50e6:	4638      	mov	r0, r7
            digitalWrite(Green, HIGH);
   d50e8:	b2b6      	uxth	r6, r6
            contadorRGB++;
            break;
        }

        case 5: {
            digitalWrite(Red, HIGH);
   d50ea:	f000 ffc8 	bl	d607e <digitalWrite>
            digitalWrite(Green, HIGH);
   d50ee:	2101      	movs	r1, #1
   d50f0:	4630      	mov	r0, r6
   d50f2:	f000 ffc4 	bl	d607e <digitalWrite>
            delay(1000);
   d50f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d50fa:	f000 fbf9 	bl	d58f0 <delay>
            digitalWrite(Red, LOW);
   d50fe:	2100      	movs	r1, #0
   d5100:	4638      	mov	r0, r7
   d5102:	f000 ffbc 	bl	d607e <digitalWrite>
            digitalWrite(Green, LOW);
   d5106:	2100      	movs	r1, #0
   d5108:	4630      	mov	r0, r6
   d510a:	e01c      	b.n	d5146 <_ZN12Contador_RGB7processEiii+0x10e>
            contadorRGB++;
            break;
        }

        case 6: {
            digitalWrite(Red, HIGH);
   d510c:	b2bf      	uxth	r7, r7
   d510e:	2101      	movs	r1, #1
   d5110:	4638      	mov	r0, r7
            digitalWrite(Green, HIGH);
   d5112:	b2b6      	uxth	r6, r6
            contadorRGB++;
            break;
        }

        case 6: {
            digitalWrite(Red, HIGH);
   d5114:	f000 ffb3 	bl	d607e <digitalWrite>
            digitalWrite(Green, HIGH);
            digitalWrite(Blue, HIGH);
   d5118:	b2ad      	uxth	r5, r5
            break;
        }

        case 6: {
            digitalWrite(Red, HIGH);
            digitalWrite(Green, HIGH);
   d511a:	2101      	movs	r1, #1
   d511c:	4630      	mov	r0, r6
   d511e:	f000 ffae 	bl	d607e <digitalWrite>
            digitalWrite(Blue, HIGH);
   d5122:	2101      	movs	r1, #1
   d5124:	4628      	mov	r0, r5
   d5126:	f000 ffaa 	bl	d607e <digitalWrite>
            delay(1000);
   d512a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d512e:	f000 fbdf 	bl	d58f0 <delay>
            digitalWrite(Red, LOW);
   d5132:	2100      	movs	r1, #0
   d5134:	4638      	mov	r0, r7
   d5136:	f000 ffa2 	bl	d607e <digitalWrite>
            digitalWrite(Green, LOW);
   d513a:	2100      	movs	r1, #0
   d513c:	4630      	mov	r0, r6
   d513e:	f000 ff9e 	bl	d607e <digitalWrite>
            digitalWrite(Blue, LOW);
   d5142:	2100      	movs	r1, #0
   d5144:	4628      	mov	r0, r5
   d5146:	f000 ff9a 	bl	d607e <digitalWrite>
            contadorRGB++;
   d514a:	68e3      	ldr	r3, [r4, #12]
   d514c:	3301      	adds	r3, #1
   d514e:	60e3      	str	r3, [r4, #12]
            break;
        }
    }

    if(contadorRGB == 7){
   d5150:	68e3      	ldr	r3, [r4, #12]
   d5152:	2b07      	cmp	r3, #7
   d5154:	d104      	bne.n	d5160 <_ZN12Contador_RGB7processEiii+0x128>
        doit();
   d5156:	4620      	mov	r0, r4
    }
}
   d5158:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            break;
        }
    }

    if(contadorRGB == 7){
        doit();
   d515c:	f7ff bf60 	b.w	d5020 <_ZN12Contador_RGB4doitEv>
   d5160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5162:	bf00      	nop
   d5164:	000d65df 	.word	0x000d65df

000d5168 <_GLOBAL__sub_I_contadorRGB>:
   d5168:	f000 b8c0 	b.w	d52ec <HAL_Pin_Map>

000d516c <_ZN15ADC_a_Neopixel2C1Ev>:
 * Constructor.
 */
ADC_a_Neopixel2::ADC_a_Neopixel2()
{
  // be sure not to call anything that requires hardware be initialized here, put those in begin()
}
   d516c:	4770      	bx	lr
	...

000d5170 <_ZN15ADC_a_Neopixel25beginEv>:

/**
 * Example method.
 */
void ADC_a_Neopixel2::begin()
{
   d5170:	b510      	push	{r4, lr}
    // initialize hardware
    Serial.println("ADC_A_NEOPIXEL2 begin");

    strip3.begin();
   d5172:	4c09      	ldr	r4, [pc, #36]	; (d5198 <_ZN15ADC_a_Neopixel25beginEv+0x28>)
 * Example method.
 */
void ADC_a_Neopixel2::begin()
{
    // initialize hardware
    Serial.println("ADC_A_NEOPIXEL2 begin");
   d5174:	f000 fd02 	bl	d5b7c <_Z16_fetch_usbserialv>
   d5178:	4908      	ldr	r1, [pc, #32]	; (d519c <_ZN15ADC_a_Neopixel25beginEv+0x2c>)
   d517a:	f000 fb42 	bl	d5802 <_ZN5Print7printlnEPKc>

    strip3.begin();
   d517e:	4620      	mov	r0, r4
   d5180:	f7ff f979 	bl	d4476 <_ZN17Adafruit_NeoPixel5beginEv>
    strip3.setBrightness(255);
   d5184:	4620      	mov	r0, r4
   d5186:	21ff      	movs	r1, #255	; 0xff
   d5188:	f7ff fb9e 	bl	d48c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    strip3.show();
   d518c:	4620      	mov	r0, r4
}
   d518e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // initialize hardware
    Serial.println("ADC_A_NEOPIXEL2 begin");

    strip3.begin();
    strip3.setBrightness(255);
    strip3.show();
   d5192:	f7ff b9a7 	b.w	d44e4 <_ZN17Adafruit_NeoPixel4showEv>
   d5196:	bf00      	nop
   d5198:	2003e3bc 	.word	0x2003e3bc
   d519c:	000d65f4 	.word	0x000d65f4

000d51a0 <_ZN15ADC_a_Neopixel27processEv>:

/**
 * Example method.
 */
void ADC_a_Neopixel2::process()
{
   d51a0:	b510      	push	{r4, lr}
    // do something useful
    Serial.println("called process");
   d51a2:	f000 fceb 	bl	d5b7c <_Z16_fetch_usbserialv>
   d51a6:	4939      	ldr	r1, [pc, #228]	; (d528c <_ZN15ADC_a_Neopixel27processEv+0xec>)

    analogValue4 = analogRead(A5);
   d51a8:	4c39      	ldr	r4, [pc, #228]	; (d5290 <_ZN15ADC_a_Neopixel27processEv+0xf0>)
 * Example method.
 */
void ADC_a_Neopixel2::process()
{
    // do something useful
    Serial.println("called process");
   d51aa:	f000 fb2a 	bl	d5802 <_ZN5Print7printlnEPKc>

    analogValue4 = analogRead(A5);
   d51ae:	200e      	movs	r0, #14
   d51b0:	f000 ff7e 	bl	d60b0 <analogRead>
   d51b4:	6020      	str	r0, [r4, #0]

    strip3.clear();
   d51b6:	4837      	ldr	r0, [pc, #220]	; (d5294 <_ZN15ADC_a_Neopixel27processEv+0xf4>)
   d51b8:	f7ff fbac 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>

    if(analogValue4 > 0 && analogValue4 < 511){
   d51bc:	6823      	ldr	r3, [r4, #0]
   d51be:	4c36      	ldr	r4, [pc, #216]	; (d5298 <_ZN15ADC_a_Neopixel27processEv+0xf8>)
   d51c0:	1e5a      	subs	r2, r3, #1
   d51c2:	f5b2 7fff 	cmp.w	r2, #510	; 0x1fe
   d51c6:	d206      	bcs.n	d51d6 <_ZN15ADC_a_Neopixel27processEv+0x36>
        strip3.clear();
   d51c8:	4832      	ldr	r0, [pc, #200]	; (d5294 <_ZN15ADC_a_Neopixel27processEv+0xf4>)
   d51ca:	f7ff fba3 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
        color3=strip3.Color(0,0,255);
   d51ce:	2100      	movs	r1, #0
   d51d0:	22ff      	movs	r2, #255	; 0xff
   d51d2:	4608      	mov	r0, r1
   d51d4:	e049      	b.n	d526a <_ZN15ADC_a_Neopixel27processEv+0xca>
        strip3.setPixelColor(0,color3);
        strip3.show();
        delay(200);
    } else if(analogValue4 >= 511 && analogValue4 < 1022){
   d51d6:	f46f 72ff 	mvn.w	r2, #510	; 0x1fe
   d51da:	189a      	adds	r2, r3, r2
   d51dc:	f5b2 7fff 	cmp.w	r2, #510	; 0x1fe
   d51e0:	d805      	bhi.n	d51ee <_ZN15ADC_a_Neopixel27processEv+0x4e>
        strip3.clear();
   d51e2:	482c      	ldr	r0, [pc, #176]	; (d5294 <_ZN15ADC_a_Neopixel27processEv+0xf4>)
   d51e4:	f7ff fb96 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
        color3=strip3.Color(0,255,0);
   d51e8:	2200      	movs	r2, #0
   d51ea:	21ff      	movs	r1, #255	; 0xff
   d51ec:	e03c      	b.n	d5268 <_ZN15ADC_a_Neopixel27processEv+0xc8>
        strip3.setPixelColor(0,color3);
        strip3.show();
        delay(200);
    } else if(analogValue4 >= 1022 && analogValue4 < 1533){
   d51ee:	f2a3 32fe 	subw	r2, r3, #1022	; 0x3fe
   d51f2:	f5b2 7fff 	cmp.w	r2, #510	; 0x1fe
   d51f6:	d806      	bhi.n	d5206 <_ZN15ADC_a_Neopixel27processEv+0x66>
        strip3.clear();
   d51f8:	4826      	ldr	r0, [pc, #152]	; (d5294 <_ZN15ADC_a_Neopixel27processEv+0xf4>)
   d51fa:	f7ff fb8b 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
        color3=strip3.Color(0,255,255);
   d51fe:	22ff      	movs	r2, #255	; 0xff
   d5200:	4611      	mov	r1, r2
   d5202:	2000      	movs	r0, #0
   d5204:	e031      	b.n	d526a <_ZN15ADC_a_Neopixel27processEv+0xca>
        strip3.setPixelColor(0,color3);
        strip3.show();
        delay(200);
    } else if(analogValue4 >= 1533 && analogValue4 < 2044){
   d5206:	f2a3 52fd 	subw	r2, r3, #1533	; 0x5fd
   d520a:	f5b2 7fff 	cmp.w	r2, #510	; 0x1fe
   d520e:	d806      	bhi.n	d521e <_ZN15ADC_a_Neopixel27processEv+0x7e>
        strip3.clear();
   d5210:	4820      	ldr	r0, [pc, #128]	; (d5294 <_ZN15ADC_a_Neopixel27processEv+0xf4>)
   d5212:	f7ff fb7f 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
        color3=strip3.Color(255,0,0);
   d5216:	2200      	movs	r2, #0
   d5218:	4611      	mov	r1, r2
   d521a:	20ff      	movs	r0, #255	; 0xff
   d521c:	e025      	b.n	d526a <_ZN15ADC_a_Neopixel27processEv+0xca>
        strip3.setPixelColor(0,color3);
        strip3.show();
        delay(200);
    } else if(analogValue4 >= 2044 && analogValue4 < 2555){
   d521e:	f2a3 72fc 	subw	r2, r3, #2044	; 0x7fc
   d5222:	f5b2 7fff 	cmp.w	r2, #510	; 0x1fe
   d5226:	d805      	bhi.n	d5234 <_ZN15ADC_a_Neopixel27processEv+0x94>
        strip3.clear();
   d5228:	481a      	ldr	r0, [pc, #104]	; (d5294 <_ZN15ADC_a_Neopixel27processEv+0xf4>)
   d522a:	f7ff fb73 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
        color3=strip3.Color(255,0,255);
   d522e:	22ff      	movs	r2, #255	; 0xff
   d5230:	2100      	movs	r1, #0
   d5232:	e019      	b.n	d5268 <_ZN15ADC_a_Neopixel27processEv+0xc8>
        strip3.setPixelColor(0,color3);
        strip3.show();
        delay(200);
    } else if(analogValue4 >= 2555 && analogValue4 < 3066){
   d5234:	f6a3 12fb 	subw	r2, r3, #2555	; 0x9fb
   d5238:	f5b2 7fff 	cmp.w	r2, #510	; 0x1fe
   d523c:	d806      	bhi.n	d524c <_ZN15ADC_a_Neopixel27processEv+0xac>
        strip3.clear();
   d523e:	4815      	ldr	r0, [pc, #84]	; (d5294 <_ZN15ADC_a_Neopixel27processEv+0xf4>)
   d5240:	f7ff fb68 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
        color3=strip3.Color(255,255,0);
   d5244:	21ff      	movs	r1, #255	; 0xff
   d5246:	2200      	movs	r2, #0
   d5248:	4608      	mov	r0, r1
   d524a:	e00e      	b.n	d526a <_ZN15ADC_a_Neopixel27processEv+0xca>
        strip3.setPixelColor(0,color3);
        strip3.show();
        delay(200);
    } else if(analogValue4 >= 3066 && analogValue4 < 3577){
   d524c:	f6a3 33fa 	subw	r3, r3, #3066	; 0xbfa
   d5250:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
        strip3.clear();
   d5254:	480f      	ldr	r0, [pc, #60]	; (d5294 <_ZN15ADC_a_Neopixel27processEv+0xf4>)
        strip3.clear();
        color3=strip3.Color(255,255,0);
        strip3.setPixelColor(0,color3);
        strip3.show();
        delay(200);
    } else if(analogValue4 >= 3066 && analogValue4 < 3577){
   d5256:	d803      	bhi.n	d5260 <_ZN15ADC_a_Neopixel27processEv+0xc0>
        strip3.clear();
   d5258:	f7ff fb5c 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
        color3=strip3.Color(255,255,255);
   d525c:	22ff      	movs	r2, #255	; 0xff
   d525e:	e002      	b.n	d5266 <_ZN15ADC_a_Neopixel27processEv+0xc6>
        strip3.setPixelColor(0,color3);
        strip3.show();
        delay(200);
    } else {
        strip3.clear();
   d5260:	f7ff fb58 	bl	d4914 <_ZN17Adafruit_NeoPixel5clearEv>
        color3=strip3.Color(0,0,0);
   d5264:	2200      	movs	r2, #0
   d5266:	4611      	mov	r1, r2
   d5268:	4610      	mov	r0, r2
   d526a:	f7ff fb28 	bl	d48be <_ZN17Adafruit_NeoPixel5ColorEhhh>
        strip3.setPixelColor(0,color3);
   d526e:	2100      	movs	r1, #0
        strip3.setPixelColor(0,color3);
        strip3.show();
        delay(200);
    } else {
        strip3.clear();
        color3=strip3.Color(0,0,0);
   d5270:	4602      	mov	r2, r0
   d5272:	6020      	str	r0, [r4, #0]
        strip3.setPixelColor(0,color3);
   d5274:	4807      	ldr	r0, [pc, #28]	; (d5294 <_ZN15ADC_a_Neopixel27processEv+0xf4>)
   d5276:	f7ff fad7 	bl	d4828 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        strip3.show();
   d527a:	4806      	ldr	r0, [pc, #24]	; (d5294 <_ZN15ADC_a_Neopixel27processEv+0xf4>)
   d527c:	f7ff f932 	bl	d44e4 <_ZN17Adafruit_NeoPixel4showEv>
        delay(200);
   d5280:	20c8      	movs	r0, #200	; 0xc8
    }
    
    //doit();
}
   d5282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    } else {
        strip3.clear();
        color3=strip3.Color(0,0,0);
        strip3.setPixelColor(0,color3);
        strip3.show();
        delay(200);
   d5286:	f000 bb33 	b.w	d58f0 <delay>
   d528a:	bf00      	nop
   d528c:	000d660a 	.word	0x000d660a
   d5290:	2003e3b4 	.word	0x2003e3b4
   d5294:	2003e3bc 	.word	0x2003e3bc
   d5298:	2003e3b8 	.word	0x2003e3b8

000d529c <_GLOBAL__sub_I_strip3>:
* Example private method
*/
void ADC_a_Neopixel2::doit()
{
    Serial.println("called doit");
}
   d529c:	b510      	push	{r4, lr}

#define PIXEL_PIN A1
#define PIXEL_COUNT 1
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip3 = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d529e:	4c08      	ldr	r4, [pc, #32]	; (d52c0 <_GLOBAL__sub_I_strip3+0x24>)
   d52a0:	f000 f824 	bl	d52ec <HAL_Pin_Map>
   d52a4:	2212      	movs	r2, #18
   d52a6:	2101      	movs	r1, #1
   d52a8:	4620      	mov	r0, r4
   d52aa:	2302      	movs	r3, #2
   d52ac:	f7ff f908 	bl	d44c0 <_ZN17Adafruit_NeoPixelC1Ethh>
   d52b0:	4620      	mov	r0, r4
   d52b2:	4a04      	ldr	r2, [pc, #16]	; (d52c4 <_GLOBAL__sub_I_strip3+0x28>)
   d52b4:	4904      	ldr	r1, [pc, #16]	; (d52c8 <_GLOBAL__sub_I_strip3+0x2c>)
* Example private method
*/
void ADC_a_Neopixel2::doit()
{
    Serial.println("called doit");
}
   d52b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#define PIXEL_PIN A1
#define PIXEL_COUNT 1
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip3 = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d52ba:	f000 bf53 	b.w	d6164 <__aeabi_atexit>
   d52be:	bf00      	nop
   d52c0:	2003e3bc 	.word	0x2003e3bc
   d52c4:	2003e338 	.word	0x2003e338
   d52c8:	000d4421 	.word	0x000d4421

000d52cc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <netdb_freeaddrinfo+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	689b      	ldr	r3, [r3, #8]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030268 	.word	0x00030268

000d52dc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <netdb_getaddrinfo+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	68db      	ldr	r3, [r3, #12]
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	00030268 	.word	0x00030268

000d52ec <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <HAL_Pin_Map+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	681b      	ldr	r3, [r3, #0]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	0003022c 	.word	0x0003022c

000d52fc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <HAL_Validate_Pin_Function+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	685b      	ldr	r3, [r3, #4]
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	0003022c 	.word	0x0003022c

000d530c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <HAL_Pin_Mode+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	689b      	ldr	r3, [r3, #8]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	0003022c 	.word	0x0003022c

000d531c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <HAL_Get_Pin_Mode+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	68db      	ldr	r3, [r3, #12]
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	0003022c 	.word	0x0003022c

000d532c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <HAL_GPIO_Write+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	691b      	ldr	r3, [r3, #16]
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	0003022c 	.word	0x0003022c

000d533c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <HAL_ADC_Read+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	0003022c 	.word	0x0003022c

000d534c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <HAL_SPI_Init+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	69db      	ldr	r3, [r3, #28]
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	00030230 	.word	0x00030230

000d535c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <HAL_SPI_Is_Enabled+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	6a1b      	ldr	r3, [r3, #32]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	00030230 	.word	0x00030230

000d536c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <HAL_RNG_GetRandomNumber+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	685b      	ldr	r3, [r3, #4]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	00030218 	.word	0x00030218

000d537c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <HAL_Delay_Microseconds+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	68db      	ldr	r3, [r3, #12]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	00030218 	.word	0x00030218

000d538c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	691b      	ldr	r3, [r3, #16]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	00030218 	.word	0x00030218

000d539c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	695b      	ldr	r3, [r3, #20]
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030218 	.word	0x00030218

000d53ac <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <os_thread_is_current+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	689b      	ldr	r3, [r3, #8]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030248 	.word	0x00030248

000d53bc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <os_thread_join+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	691b      	ldr	r3, [r3, #16]
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030248 	.word	0x00030248

000d53cc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <os_thread_cleanup+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	695b      	ldr	r3, [r3, #20]
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030248 	.word	0x00030248

000d53dc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <os_mutex_create+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030248 	.word	0x00030248

000d53ec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <os_mutex_recursive_create+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030248 	.word	0x00030248

000d53fc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <inet_inet_ntop+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	695b      	ldr	r3, [r3, #20]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030264 	.word	0x00030264

000d540c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <HAL_USART_Init+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	681b      	ldr	r3, [r3, #0]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	0003023c 	.word	0x0003023c

000d541c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <HAL_USART_Write_Data+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	68db      	ldr	r3, [r3, #12]
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	0003023c 	.word	0x0003023c

000d542c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <HAL_USART_Available_Data+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	691b      	ldr	r3, [r3, #16]
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	0003023c 	.word	0x0003023c

000d543c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <HAL_USART_Read_Data+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	695b      	ldr	r3, [r3, #20]
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	0003023c 	.word	0x0003023c

000d544c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <HAL_USART_Peek_Data+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	699b      	ldr	r3, [r3, #24]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	0003023c 	.word	0x0003023c

000d545c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <HAL_USART_Flush_Data+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	69db      	ldr	r3, [r3, #28]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	0003023c 	.word	0x0003023c

000d546c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <HAL_USART_Is_Enabled+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	6a1b      	ldr	r3, [r3, #32]
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	0003023c 	.word	0x0003023c

000d547c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <HAL_USART_Available_Data_For_Write+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	0003023c 	.word	0x0003023c

000d548c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <HAL_I2C_Begin+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	68db      	ldr	r3, [r3, #12]
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	00030228 	.word	0x00030228

000d549c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <HAL_I2C_Request_Data+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	695b      	ldr	r3, [r3, #20]
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	00030228 	.word	0x00030228

000d54ac <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <HAL_I2C_Begin_Transmission+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	699b      	ldr	r3, [r3, #24]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	00030228 	.word	0x00030228

000d54bc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <HAL_I2C_End_Transmission+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	69db      	ldr	r3, [r3, #28]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	00030228 	.word	0x00030228

000d54cc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <HAL_I2C_Write_Data+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	6a1b      	ldr	r3, [r3, #32]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	00030228 	.word	0x00030228

000d54dc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <HAL_I2C_Available_Data+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	00030228 	.word	0x00030228

000d54ec <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <HAL_I2C_Read_Data+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	00030228 	.word	0x00030228

000d54fc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <HAL_I2C_Peek_Data+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	00030228 	.word	0x00030228

000d550c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <HAL_I2C_Flush_Data+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	00030228 	.word	0x00030228

000d551c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <HAL_I2C_Is_Enabled+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	00030228 	.word	0x00030228

000d552c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <HAL_I2C_Init+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	00030228 	.word	0x00030228

000d553c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <HAL_USB_USART_Init+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	681b      	ldr	r3, [r3, #0]
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	0003024c 	.word	0x0003024c

000d554c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <HAL_USB_USART_Begin+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	685b      	ldr	r3, [r3, #4]
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	0003024c 	.word	0x0003024c

000d555c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <HAL_USB_USART_Available_Data+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	691b      	ldr	r3, [r3, #16]
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	0003024c 	.word	0x0003024c

000d556c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	695b      	ldr	r3, [r3, #20]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	0003024c 	.word	0x0003024c

000d557c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <HAL_USB_USART_Receive_Data+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	699b      	ldr	r3, [r3, #24]
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	0003024c 	.word	0x0003024c

000d558c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <HAL_USB_USART_Send_Data+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	69db      	ldr	r3, [r3, #28]
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	0003024c 	.word	0x0003024c

000d559c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <HAL_USB_USART_Flush_Data+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	6a1b      	ldr	r3, [r3, #32]
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	0003024c 	.word	0x0003024c

000d55ac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <set_system_mode+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	685b      	ldr	r3, [r3, #4]
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	00030220 	.word	0x00030220

000d55bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <system_delay_ms+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	695b      	ldr	r3, [r3, #20]
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	00030220 	.word	0x00030220

000d55cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b03      	ldr	r3, [pc, #12]	; (d55dc <system_ctrl_set_app_request_handler+0x10>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d55d6:	9301      	str	r3, [sp, #4]
   d55d8:	bd08      	pop	{r3, pc}
   d55da:	0000      	.short	0x0000
   d55dc:	00030220 	.word	0x00030220

000d55e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d55e0:	b508      	push	{r3, lr}
   d55e2:	4b03      	ldr	r3, [pc, #12]	; (d55f0 <system_ctrl_set_result+0x10>)
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d55ea:	9301      	str	r3, [sp, #4]
   d55ec:	bd08      	pop	{r3, pc}
   d55ee:	0000      	.short	0x0000
   d55f0:	00030220 	.word	0x00030220

000d55f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <network_connect+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	685b      	ldr	r3, [r3, #4]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030240 	.word	0x00030240

000d5604 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <network_connecting+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	689b      	ldr	r3, [r3, #8]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030240 	.word	0x00030240

000d5614 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <network_disconnect+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	68db      	ldr	r3, [r3, #12]
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030240 	.word	0x00030240

000d5624 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <network_ready+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	691b      	ldr	r3, [r3, #16]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030240 	.word	0x00030240

000d5634 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <network_on+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	695b      	ldr	r3, [r3, #20]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030240 	.word	0x00030240

000d5644 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <network_off+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	699b      	ldr	r3, [r3, #24]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030240 	.word	0x00030240

000d5654 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <network_listen+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	69db      	ldr	r3, [r3, #28]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030240 	.word	0x00030240

000d5664 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <network_listening+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	6a1b      	ldr	r3, [r3, #32]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030240 	.word	0x00030240

000d5674 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <network_set_listen_timeout+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030240 	.word	0x00030240

000d5684 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <network_get_listen_timeout+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030240 	.word	0x00030240

000d5694 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030244 	.word	0x00030244

000d56a4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <malloc+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	681b      	ldr	r3, [r3, #0]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	0003021c 	.word	0x0003021c

000d56b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <free+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	685b      	ldr	r3, [r3, #4]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	0003021c 	.word	0x0003021c

000d56c4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d56c4:	2200      	movs	r2, #0
   d56c6:	4611      	mov	r1, r2
   d56c8:	6840      	ldr	r0, [r0, #4]
   d56ca:	f7ff bfcb 	b.w	d5664 <network_listening>

000d56ce <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d56ce:	2200      	movs	r2, #0
   d56d0:	4611      	mov	r1, r2
   d56d2:	6840      	ldr	r0, [r0, #4]
   d56d4:	f7ff bfd6 	b.w	d5684 <network_get_listen_timeout>

000d56d8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d56d8:	2200      	movs	r2, #0
   d56da:	6840      	ldr	r0, [r0, #4]
   d56dc:	f7ff bfca 	b.w	d5674 <network_set_listen_timeout>

000d56e0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d56e0:	2200      	movs	r2, #0
   d56e2:	f081 0101 	eor.w	r1, r1, #1
   d56e6:	6840      	ldr	r0, [r0, #4]
   d56e8:	f7ff bfb4 	b.w	d5654 <network_listen>

000d56ec <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d56ec:	2300      	movs	r3, #0
   d56ee:	461a      	mov	r2, r3
   d56f0:	4619      	mov	r1, r3
   d56f2:	6840      	ldr	r0, [r0, #4]
   d56f4:	f7ff bfa6 	b.w	d5644 <network_off>

000d56f8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d56f8:	2300      	movs	r3, #0
   d56fa:	461a      	mov	r2, r3
   d56fc:	4619      	mov	r1, r3
   d56fe:	6840      	ldr	r0, [r0, #4]
   d5700:	f7ff bf98 	b.w	d5634 <network_on>

000d5704 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5704:	2200      	movs	r2, #0
   d5706:	4611      	mov	r1, r2
   d5708:	6840      	ldr	r0, [r0, #4]
   d570a:	f7ff bf8b 	b.w	d5624 <network_ready>

000d570e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d570e:	2200      	movs	r2, #0
   d5710:	4611      	mov	r1, r2
   d5712:	6840      	ldr	r0, [r0, #4]
   d5714:	f7ff bf76 	b.w	d5604 <network_connecting>

000d5718 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5718:	2200      	movs	r2, #0
   d571a:	2102      	movs	r1, #2
   d571c:	6840      	ldr	r0, [r0, #4]
   d571e:	f7ff bf79 	b.w	d5614 <network_disconnect>

000d5722 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5722:	2300      	movs	r3, #0
   d5724:	461a      	mov	r2, r3
   d5726:	6840      	ldr	r0, [r0, #4]
   d5728:	f7ff bf64 	b.w	d55f4 <network_connect>

000d572c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d572c:	4b02      	ldr	r3, [pc, #8]	; (d5738 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d572e:	2203      	movs	r2, #3
   d5730:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5732:	4a02      	ldr	r2, [pc, #8]	; (d573c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5734:	601a      	str	r2, [r3, #0]
   d5736:	4770      	bx	lr
   d5738:	2003e3d0 	.word	0x2003e3d0
   d573c:	000d6624 	.word	0x000d6624

000d5740 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5740:	4770      	bx	lr

000d5742 <_ZN8SPIClassD0Ev>:
   d5742:	b510      	push	{r4, lr}
   d5744:	4604      	mov	r4, r0
   d5746:	f7fe fca6 	bl	d4096 <_ZdlPv>
   d574a:	4620      	mov	r0, r4
   d574c:	bd10      	pop	{r4, pc}
	...

000d5750 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5750:	b570      	push	{r4, r5, r6, lr}
   d5752:	4b08      	ldr	r3, [pc, #32]	; (d5774 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5754:	6003      	str	r3, [r0, #0]
   d5756:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5758:	2500      	movs	r5, #0
   d575a:	460e      	mov	r6, r1
   d575c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5760:	f7ff fe3c 	bl	d53dc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5764:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5766:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5768:	f7ff fdf0 	bl	d534c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d576c:	60a5      	str	r5, [r4, #8]
}
   d576e:	4620      	mov	r0, r4
   d5770:	bd70      	pop	{r4, r5, r6, pc}
   d5772:	bf00      	nop
   d5774:	000d6658 	.word	0x000d6658

000d5778 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5778:	7900      	ldrb	r0, [r0, #4]
   d577a:	f7ff bdef 	b.w	d535c <HAL_SPI_Is_Enabled>
	...

000d5780 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5780:	4b04      	ldr	r3, [pc, #16]	; (d5794 <_GLOBAL__sub_I_System+0x14>)
   d5782:	2000      	movs	r0, #0
   d5784:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5788:	7018      	strb	r0, [r3, #0]
   d578a:	8058      	strh	r0, [r3, #2]
   d578c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d578e:	f7ff bf0d 	b.w	d55ac <set_system_mode>
   d5792:	bf00      	nop
   d5794:	2003e3d8 	.word	0x2003e3d8

000d5798 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d579a:	4606      	mov	r6, r0
   d579c:	460d      	mov	r5, r1
   d579e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d57a0:	2400      	movs	r4, #0
  while (size--) {
   d57a2:	42bd      	cmp	r5, r7
   d57a4:	d00c      	beq.n	d57c0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d57a6:	6833      	ldr	r3, [r6, #0]
   d57a8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d57ac:	689b      	ldr	r3, [r3, #8]
   d57ae:	4630      	mov	r0, r6
   d57b0:	4798      	blx	r3
     if (chunk>=0)
   d57b2:	2800      	cmp	r0, #0
   d57b4:	db01      	blt.n	d57ba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d57b6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d57b8:	e7f3      	b.n	d57a2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d57ba:	2c00      	cmp	r4, #0
   d57bc:	bf08      	it	eq
   d57be:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d57c0:	4620      	mov	r0, r4
   d57c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57c4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d57c4:	b570      	push	{r4, r5, r6, lr}
   d57c6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d57c8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d57ca:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d57cc:	b149      	cbz	r1, d57e2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d57ce:	f000 fe61 	bl	d6494 <strlen>
   d57d2:	682b      	ldr	r3, [r5, #0]
   d57d4:	4602      	mov	r2, r0
   d57d6:	4621      	mov	r1, r4
   d57d8:	4628      	mov	r0, r5
   d57da:	68db      	ldr	r3, [r3, #12]
    }
   d57dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d57e0:	4718      	bx	r3
    }
   d57e2:	bd70      	pop	{r4, r5, r6, pc}

000d57e4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d57e4:	6803      	ldr	r3, [r0, #0]
   d57e6:	689b      	ldr	r3, [r3, #8]
   d57e8:	4718      	bx	r3

000d57ea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d57ea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d57ec:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d57ee:	4605      	mov	r5, r0
  size_t n = print('\r');
   d57f0:	f7ff fff8 	bl	d57e4 <_ZN5Print5printEc>
  n += print('\n');
   d57f4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d57f6:	4604      	mov	r4, r0
  n += print('\n');
   d57f8:	4628      	mov	r0, r5
   d57fa:	f7ff fff3 	bl	d57e4 <_ZN5Print5printEc>
  return n;
}
   d57fe:	4420      	add	r0, r4
   d5800:	bd38      	pop	{r3, r4, r5, pc}

000d5802 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5802:	b538      	push	{r3, r4, r5, lr}
   d5804:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5806:	f7ff ffdd 	bl	d57c4 <_ZN5Print5writeEPKc>
   d580a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d580c:	4628      	mov	r0, r5
   d580e:	f7ff ffec 	bl	d57ea <_ZN5Print7printlnEv>
  return n;
}
   d5812:	4420      	add	r0, r4
   d5814:	bd38      	pop	{r3, r4, r5, pc}

000d5816 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5816:	b530      	push	{r4, r5, lr}
   d5818:	b08b      	sub	sp, #44	; 0x2c
   d581a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d581c:	2100      	movs	r1, #0
   d581e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5822:	2a01      	cmp	r2, #1
   d5824:	bf98      	it	ls
   d5826:	220a      	movls	r2, #10
   d5828:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d582c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5830:	fb05 3312 	mls	r3, r5, r2, r3
   d5834:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5838:	2b09      	cmp	r3, #9
   d583a:	bf94      	ite	ls
   d583c:	3330      	addls	r3, #48	; 0x30
   d583e:	3337      	addhi	r3, #55	; 0x37
   d5840:	b2db      	uxtb	r3, r3
   d5842:	4621      	mov	r1, r4
   d5844:	f804 3901 	strb.w	r3, [r4], #-1
   d5848:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d584a:	2d00      	cmp	r5, #0
   d584c:	d1ee      	bne.n	d582c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d584e:	f7ff ffb9 	bl	d57c4 <_ZN5Print5writeEPKc>
}
   d5852:	b00b      	add	sp, #44	; 0x2c
   d5854:	bd30      	pop	{r4, r5, pc}

000d5856 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5856:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5858:	b92a      	cbnz	r2, d5866 <_ZN5Print5printEmi+0x10>
   d585a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d585c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5860:	689b      	ldr	r3, [r3, #8]
   d5862:	b2c9      	uxtb	r1, r1
   d5864:	4718      	bx	r3
  else return printNumber(n, base);
   d5866:	b2d2      	uxtb	r2, r2
}
   d5868:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d586c:	f7ff bfd3 	b.w	d5816 <_ZN5Print11printNumberEmh>

000d5870 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5870:	f7ff bff1 	b.w	d5856 <_ZN5Print5printEmi>

000d5874 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5878:	4607      	mov	r7, r0
   d587a:	460e      	mov	r6, r1
  if (base == 0) {
   d587c:	4615      	mov	r5, r2
   d587e:	b92a      	cbnz	r2, d588c <_ZN5Print5printEli+0x18>
    return write(n);
   d5880:	6803      	ldr	r3, [r0, #0]
   d5882:	b2c9      	uxtb	r1, r1
   d5884:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d588a:	4718      	bx	r3
  } else if (base == 10) {
   d588c:	2a0a      	cmp	r2, #10
   d588e:	d102      	bne.n	d5896 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5890:	2900      	cmp	r1, #0
   d5892:	da01      	bge.n	d5898 <_ZN5Print5printEli+0x24>
   d5894:	e004      	b.n	d58a0 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5896:	b2d2      	uxtb	r2, r2
  }
}
   d5898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d589c:	f7ff bfbb 	b.w	d5816 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d58a0:	212d      	movs	r1, #45	; 0x2d
   d58a2:	f7ff ff9f 	bl	d57e4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d58a6:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d58a8:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d58aa:	4271      	negs	r1, r6
   d58ac:	4638      	mov	r0, r7
   d58ae:	f7ff ffb2 	bl	d5816 <_ZN5Print11printNumberEmh>
   d58b2:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d58b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d58b8 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d58b8:	b538      	push	{r3, r4, r5, lr}
   d58ba:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d58bc:	f7ff ffda 	bl	d5874 <_ZN5Print5printEli>
   d58c0:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d58c2:	4628      	mov	r0, r5
   d58c4:	f7ff ff91 	bl	d57ea <_ZN5Print7printlnEv>
  return n;
}
   d58c8:	4420      	add	r0, r4
   d58ca:	bd38      	pop	{r3, r4, r5, pc}

000d58cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d58cc:	4b01      	ldr	r3, [pc, #4]	; (d58d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d58ce:	4a02      	ldr	r2, [pc, #8]	; (d58d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d58d0:	601a      	str	r2, [r3, #0]
   d58d2:	4770      	bx	lr
   d58d4:	2003e3e0 	.word	0x2003e3e0
   d58d8:	000d6718 	.word	0x000d6718

000d58dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d58dc:	4b02      	ldr	r3, [pc, #8]	; (d58e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d58de:	681a      	ldr	r2, [r3, #0]
   d58e0:	4b02      	ldr	r3, [pc, #8]	; (d58ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d58e2:	601a      	str	r2, [r3, #0]
   d58e4:	4770      	bx	lr
   d58e6:	bf00      	nop
   d58e8:	2003e2d0 	.word	0x2003e2d0
   d58ec:	2003e3e4 	.word	0x2003e3e4

000d58f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d58f0:	2100      	movs	r1, #0
   d58f2:	f7ff be63 	b.w	d55bc <system_delay_ms>

000d58f6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d58f6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d58f8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d58fa:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d58fc:	b113      	cbz	r3, d5904 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d58fe:	2203      	movs	r2, #3
   d5900:	4601      	mov	r1, r0
   d5902:	4798      	blx	r3
    }
   d5904:	4620      	mov	r0, r4
   d5906:	bd10      	pop	{r4, pc}

000d5908 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5908:	b510      	push	{r4, lr}
   d590a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d590c:	f7ff fff3 	bl	d58f6 <_ZNSt14_Function_baseD1Ev>
   d5910:	4620      	mov	r0, r4
   d5912:	bd10      	pop	{r4, pc}

000d5914 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5914:	4803      	ldr	r0, [pc, #12]	; (d5924 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5916:	4a04      	ldr	r2, [pc, #16]	; (d5928 <_GLOBAL__sub_I_RGB+0x14>)
   d5918:	4904      	ldr	r1, [pc, #16]	; (d592c <_GLOBAL__sub_I_RGB+0x18>)
   d591a:	2300      	movs	r3, #0
   d591c:	6083      	str	r3, [r0, #8]
   d591e:	f000 bc21 	b.w	d6164 <__aeabi_atexit>
   d5922:	bf00      	nop
   d5924:	2003e3e8 	.word	0x2003e3e8
   d5928:	2003e338 	.word	0x2003e338
   d592c:	000d5909 	.word	0x000d5909

000d5930 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5930:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5932:	4b0c      	ldr	r3, [pc, #48]	; (d5964 <serialEventRun+0x34>)
   d5934:	b133      	cbz	r3, d5944 <serialEventRun+0x14>
   d5936:	f000 f921 	bl	d5b7c <_Z16_fetch_usbserialv>
   d593a:	6803      	ldr	r3, [r0, #0]
   d593c:	691b      	ldr	r3, [r3, #16]
   d593e:	4798      	blx	r3
   d5940:	2800      	cmp	r0, #0
   d5942:	dc09      	bgt.n	d5958 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5944:	4b08      	ldr	r3, [pc, #32]	; (d5968 <serialEventRun+0x38>)
   d5946:	b163      	cbz	r3, d5962 <serialEventRun+0x32>
   d5948:	f000 f982 	bl	d5c50 <_Z22__fetch_global_Serial1v>
   d594c:	6803      	ldr	r3, [r0, #0]
   d594e:	691b      	ldr	r3, [r3, #16]
   d5950:	4798      	blx	r3
   d5952:	2800      	cmp	r0, #0
   d5954:	dc03      	bgt.n	d595e <serialEventRun+0x2e>
   d5956:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5958:	f3af 8000 	nop.w
   d595c:	e7f2      	b.n	d5944 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d595e:	f3af 8000 	nop.w
   d5962:	bd08      	pop	{r3, pc}
	...

000d596c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d596c:	b508      	push	{r3, lr}
	serialEventRun();
   d596e:	f7ff ffdf 	bl	d5930 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5972:	f7ff fd13 	bl	d539c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5976:	4b01      	ldr	r3, [pc, #4]	; (d597c <_post_loop+0x10>)
   d5978:	6018      	str	r0, [r3, #0]
   d597a:	bd08      	pop	{r3, pc}
   d597c:	2003e734 	.word	0x2003e734

000d5980 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5980:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5982:	2300      	movs	r3, #0
   d5984:	9300      	str	r3, [sp, #0]
   d5986:	461a      	mov	r2, r3
   d5988:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d598c:	f7ff fe28 	bl	d55e0 <system_ctrl_set_result>
}
   d5990:	b003      	add	sp, #12
   d5992:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5998 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5998:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d599a:	8843      	ldrh	r3, [r0, #2]
   d599c:	2b0a      	cmp	r3, #10
   d599e:	d008      	beq.n	d59b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d59a0:	2b50      	cmp	r3, #80	; 0x50
   d59a2:	d109      	bne.n	d59b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d59a4:	4b09      	ldr	r3, [pc, #36]	; (d59cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d59a6:	681b      	ldr	r3, [r3, #0]
   d59a8:	b13b      	cbz	r3, d59ba <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d59aa:	b003      	add	sp, #12
   d59ac:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d59b0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d59b2:	f7ff ffe5 	bl	d5980 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d59b6:	e006      	b.n	d59c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d59b8:	2300      	movs	r3, #0
   d59ba:	9300      	str	r3, [sp, #0]
   d59bc:	461a      	mov	r2, r3
   d59be:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d59c2:	f7ff fe0d 	bl	d55e0 <system_ctrl_set_result>
        break;
    }
}
   d59c6:	b003      	add	sp, #12
   d59c8:	f85d fb04 	ldr.w	pc, [sp], #4
   d59cc:	2003e3f8 	.word	0x2003e3f8

000d59d0 <module_user_init_hook>:

void module_user_init_hook()
{
   d59d0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d59d2:	f7ff fccb 	bl	d536c <HAL_RNG_GetRandomNumber>
   d59d6:	4604      	mov	r4, r0
    srand(seed);
   d59d8:	f000 fd34 	bl	d6444 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d59dc:	4b07      	ldr	r3, [pc, #28]	; (d59fc <module_user_init_hook+0x2c>)
   d59de:	b113      	cbz	r3, d59e6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d59e0:	4620      	mov	r0, r4
   d59e2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d59e6:	2100      	movs	r1, #0
   d59e8:	4804      	ldr	r0, [pc, #16]	; (d59fc <module_user_init_hook+0x2c>)
   d59ea:	f7ff fe53 	bl	d5694 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d59ee:	2100      	movs	r1, #0
   d59f0:	4803      	ldr	r0, [pc, #12]	; (d5a00 <module_user_init_hook+0x30>)
}
   d59f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d59f6:	f7ff bde9 	b.w	d55cc <system_ctrl_set_app_request_handler>
   d59fa:	bf00      	nop
   d59fc:	00000000 	.word	0x00000000
   d5a00:	000d5999 	.word	0x000d5999

000d5a04 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5a04:	4770      	bx	lr

000d5a06 <_ZN9IPAddressD0Ev>:
   d5a06:	b510      	push	{r4, lr}
   d5a08:	4604      	mov	r4, r0
   d5a0a:	f7fe fb44 	bl	d4096 <_ZdlPv>
   d5a0e:	4620      	mov	r0, r4
   d5a10:	bd10      	pop	{r4, pc}

000d5a12 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5a12:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d5a14:	7d03      	ldrb	r3, [r0, #20]
   d5a16:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5a18:	b08d      	sub	sp, #52	; 0x34
   d5a1a:	460e      	mov	r6, r1
   d5a1c:	f100 0704 	add.w	r7, r0, #4
   d5a20:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d5a24:	d002      	beq.n	d5a2c <_ZNK9IPAddress7printToER5Print+0x1a>
   d5a26:	f100 0508 	add.w	r5, r0, #8
   d5a2a:	e018      	b.n	d5a5e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5a2c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5a2e:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5a30:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5a34:	232f      	movs	r3, #47	; 0x2f
   d5a36:	462a      	mov	r2, r5
   d5a38:	200a      	movs	r0, #10
   d5a3a:	f7ff fcdf 	bl	d53fc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5a3e:	4628      	mov	r0, r5
   d5a40:	f000 fd28 	bl	d6494 <strlen>
   d5a44:	6833      	ldr	r3, [r6, #0]
   d5a46:	4602      	mov	r2, r0
   d5a48:	68db      	ldr	r3, [r3, #12]
   d5a4a:	4629      	mov	r1, r5
   d5a4c:	4630      	mov	r0, r6
   d5a4e:	4798      	blx	r3
   d5a50:	e00f      	b.n	d5a72 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5a52:	b124      	cbz	r4, d5a5e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5a54:	212e      	movs	r1, #46	; 0x2e
   d5a56:	4630      	mov	r0, r6
   d5a58:	f7ff fec4 	bl	d57e4 <_ZN5Print5printEc>
   d5a5c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5a5e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5a62:	220a      	movs	r2, #10
   d5a64:	4630      	mov	r0, r6
   d5a66:	f7ff ff03 	bl	d5870 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5a6a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5a6c:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5a6e:	d1f0      	bne.n	d5a52 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5a70:	4620      	mov	r0, r4
    }
    return n;
}
   d5a72:	b00d      	add	sp, #52	; 0x34
   d5a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5a78 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d5a78:	b510      	push	{r4, lr}
   d5a7a:	4b05      	ldr	r3, [pc, #20]	; (d5a90 <_ZN9IPAddressC1Ev+0x18>)
   d5a7c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5a7e:	2211      	movs	r2, #17
   d5a80:	f840 3b04 	str.w	r3, [r0], #4
   d5a84:	2100      	movs	r1, #0
   d5a86:	f000 fcd4 	bl	d6432 <memset>
{
    clear();
}
   d5a8a:	4620      	mov	r0, r4
   d5a8c:	bd10      	pop	{r4, pc}
   d5a8e:	bf00      	nop
   d5a90:	000d6774 	.word	0x000d6774

000d5a94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5a94:	4603      	mov	r3, r0
   d5a96:	4a07      	ldr	r2, [pc, #28]	; (d5ab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5a98:	b510      	push	{r4, lr}
   d5a9a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5a9e:	f101 0210 	add.w	r2, r1, #16
   d5aa2:	f851 4b04 	ldr.w	r4, [r1], #4
   d5aa6:	f843 4b04 	str.w	r4, [r3], #4
   d5aaa:	4291      	cmp	r1, r2
   d5aac:	d1f9      	bne.n	d5aa2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5aae:	780a      	ldrb	r2, [r1, #0]
   d5ab0:	701a      	strb	r2, [r3, #0]
}
   d5ab2:	bd10      	pop	{r4, pc}
   d5ab4:	000d6774 	.word	0x000d6774

000d5ab8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5ab8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5aba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5abe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5ac2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5ac6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5aca:	2304      	movs	r3, #4
   d5acc:	6041      	str	r1, [r0, #4]
   d5ace:	7503      	strb	r3, [r0, #20]
   d5ad0:	bd10      	pop	{r4, pc}

000d5ad2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5ad2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5ad4:	780d      	ldrb	r5, [r1, #0]
   d5ad6:	788b      	ldrb	r3, [r1, #2]
   d5ad8:	784a      	ldrb	r2, [r1, #1]
   d5ada:	78c9      	ldrb	r1, [r1, #3]
   d5adc:	9100      	str	r1, [sp, #0]
   d5ade:	4629      	mov	r1, r5
   d5ae0:	f7ff ffea 	bl	d5ab8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5ae4:	b003      	add	sp, #12
   d5ae6:	bd30      	pop	{r4, r5, pc}

000d5ae8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ae8:	7441      	strb	r1, [r0, #17]
   d5aea:	4770      	bx	lr

000d5aec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5aec:	4770      	bx	lr

000d5aee <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5aee:	2100      	movs	r1, #0
   d5af0:	7c00      	ldrb	r0, [r0, #16]
   d5af2:	f7ff bd43 	b.w	d557c <HAL_USB_USART_Receive_Data>

000d5af6 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5af6:	2101      	movs	r1, #1
   d5af8:	7c00      	ldrb	r0, [r0, #16]
   d5afa:	f7ff bd3f 	b.w	d557c <HAL_USB_USART_Receive_Data>

000d5afe <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5afe:	7c00      	ldrb	r0, [r0, #16]
   d5b00:	f7ff bd34 	b.w	d556c <HAL_USB_USART_Available_Data_For_Write>

000d5b04 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5b04:	7c00      	ldrb	r0, [r0, #16]
   d5b06:	f7ff bd29 	b.w	d555c <HAL_USB_USART_Available_Data>

000d5b0a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5b0a:	b538      	push	{r3, r4, r5, lr}
   d5b0c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5b0e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5b10:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5b12:	f7ff fd2b 	bl	d556c <HAL_USB_USART_Available_Data_For_Write>
   d5b16:	2800      	cmp	r0, #0
   d5b18:	dc01      	bgt.n	d5b1e <_ZN9USBSerial5writeEh+0x14>
   d5b1a:	7c60      	ldrb	r0, [r4, #17]
   d5b1c:	b120      	cbz	r0, d5b28 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5b1e:	4629      	mov	r1, r5
   d5b20:	7c20      	ldrb	r0, [r4, #16]
   d5b22:	f7ff fd33 	bl	d558c <HAL_USB_USART_Send_Data>
    return 1;
   d5b26:	2001      	movs	r0, #1
  }
  return 0;
}
   d5b28:	bd38      	pop	{r3, r4, r5, pc}

000d5b2a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5b2a:	7c00      	ldrb	r0, [r0, #16]
   d5b2c:	f7ff bd36 	b.w	d559c <HAL_USB_USART_Flush_Data>

000d5b30 <_ZN9USBSerialD0Ev>:
   d5b30:	b510      	push	{r4, lr}
   d5b32:	4604      	mov	r4, r0
   d5b34:	f7fe faaf 	bl	d4096 <_ZdlPv>
   d5b38:	4620      	mov	r0, r4
   d5b3a:	bd10      	pop	{r4, pc}

000d5b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5b3c:	b510      	push	{r4, lr}
   d5b3e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5b40:	2300      	movs	r3, #0
   d5b42:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5b44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b48:	60a3      	str	r3, [r4, #8]
   d5b4a:	4b05      	ldr	r3, [pc, #20]	; (d5b60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5b4c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5b4e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5b50:	4608      	mov	r0, r1
{
  _serial = serial;
   d5b52:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5b54:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5b56:	4611      	mov	r1, r2
   d5b58:	f7ff fcf0 	bl	d553c <HAL_USB_USART_Init>
}
   d5b5c:	4620      	mov	r0, r4
   d5b5e:	bd10      	pop	{r4, pc}
   d5b60:	000d6788 	.word	0x000d6788

000d5b64 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5b64:	2200      	movs	r2, #0
   d5b66:	7c00      	ldrb	r0, [r0, #16]
   d5b68:	f7ff bcf0 	b.w	d554c <HAL_USB_USART_Begin>

000d5b6c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5b6c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5b6e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5b70:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5b72:	2100      	movs	r1, #0
   d5b74:	f000 fc5d 	bl	d6432 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5b78:	4620      	mov	r0, r4
   d5b7a:	bd10      	pop	{r4, pc}

000d5b7c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5b7c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5b7e:	4d0e      	ldr	r5, [pc, #56]	; (d5bb8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5b80:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5b82:	a801      	add	r0, sp, #4
   d5b84:	f7ff fff2 	bl	d5b6c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5b88:	6829      	ldr	r1, [r5, #0]
   d5b8a:	f011 0401 	ands.w	r4, r1, #1
   d5b8e:	d110      	bne.n	d5bb2 <_Z16_fetch_usbserialv+0x36>
   d5b90:	4628      	mov	r0, r5
   d5b92:	f7fe fa84 	bl	d409e <__cxa_guard_acquire>
   d5b96:	b160      	cbz	r0, d5bb2 <_Z16_fetch_usbserialv+0x36>
   d5b98:	aa01      	add	r2, sp, #4
   d5b9a:	4621      	mov	r1, r4
   d5b9c:	4807      	ldr	r0, [pc, #28]	; (d5bbc <_Z16_fetch_usbserialv+0x40>)
   d5b9e:	f7ff ffcd 	bl	d5b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5ba2:	4628      	mov	r0, r5
   d5ba4:	f7fe fa80 	bl	d40a8 <__cxa_guard_release>
   d5ba8:	4a05      	ldr	r2, [pc, #20]	; (d5bc0 <_Z16_fetch_usbserialv+0x44>)
   d5baa:	4906      	ldr	r1, [pc, #24]	; (d5bc4 <_Z16_fetch_usbserialv+0x48>)
   d5bac:	4803      	ldr	r0, [pc, #12]	; (d5bbc <_Z16_fetch_usbserialv+0x40>)
   d5bae:	f000 fad9 	bl	d6164 <__aeabi_atexit>
	return _usbserial;
}
   d5bb2:	4802      	ldr	r0, [pc, #8]	; (d5bbc <_Z16_fetch_usbserialv+0x40>)
   d5bb4:	b007      	add	sp, #28
   d5bb6:	bd30      	pop	{r4, r5, pc}
   d5bb8:	2003e3fc 	.word	0x2003e3fc
   d5bbc:	2003e400 	.word	0x2003e400
   d5bc0:	2003e338 	.word	0x2003e338
   d5bc4:	000d5aed 	.word	0x000d5aed

000d5bc8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5bc8:	4770      	bx	lr

000d5bca <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5bca:	7441      	strb	r1, [r0, #17]
   d5bcc:	4770      	bx	lr

000d5bce <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5bce:	7c00      	ldrb	r0, [r0, #16]
   d5bd0:	f7ff bc54 	b.w	d547c <HAL_USART_Available_Data_For_Write>

000d5bd4 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5bd4:	7c00      	ldrb	r0, [r0, #16]
   d5bd6:	f7ff bc29 	b.w	d542c <HAL_USART_Available_Data>

000d5bda <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5bda:	7c00      	ldrb	r0, [r0, #16]
   d5bdc:	f7ff bc36 	b.w	d544c <HAL_USART_Peek_Data>

000d5be0 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5be0:	7c00      	ldrb	r0, [r0, #16]
   d5be2:	f7ff bc2b 	b.w	d543c <HAL_USART_Read_Data>

000d5be6 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5be6:	7c00      	ldrb	r0, [r0, #16]
   d5be8:	f7ff bc38 	b.w	d545c <HAL_USART_Flush_Data>

000d5bec <_ZN11USARTSerialD0Ev>:
   d5bec:	b510      	push	{r4, lr}
   d5bee:	4604      	mov	r4, r0
   d5bf0:	f7fe fa51 	bl	d4096 <_ZdlPv>
   d5bf4:	4620      	mov	r0, r4
   d5bf6:	bd10      	pop	{r4, pc}

000d5bf8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5bf8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5bfa:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5bfc:	4604      	mov	r4, r0
   d5bfe:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5c00:	b925      	cbnz	r5, d5c0c <_ZN11USARTSerial5writeEh+0x14>
   d5c02:	7c00      	ldrb	r0, [r0, #16]
   d5c04:	f7ff fc3a 	bl	d547c <HAL_USART_Available_Data_For_Write>
   d5c08:	2800      	cmp	r0, #0
   d5c0a:	dd05      	ble.n	d5c18 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5c0c:	4631      	mov	r1, r6
   d5c0e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5c14:	f7ff bc02 	b.w	d541c <HAL_USART_Write_Data>
  }
  return 0;
}
   d5c18:	4628      	mov	r0, r5
   d5c1a:	bd70      	pop	{r4, r5, r6, pc}

000d5c1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5c1c:	b510      	push	{r4, lr}
   d5c1e:	4604      	mov	r4, r0
   d5c20:	4608      	mov	r0, r1
   d5c22:	4611      	mov	r1, r2
   d5c24:	2200      	movs	r2, #0
   d5c26:	6062      	str	r2, [r4, #4]
   d5c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5c2c:	60a2      	str	r2, [r4, #8]
   d5c2e:	4a05      	ldr	r2, [pc, #20]	; (d5c44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5c30:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5c32:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5c34:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5c36:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5c38:	461a      	mov	r2, r3
   d5c3a:	f7ff fbe7 	bl	d540c <HAL_USART_Init>
}
   d5c3e:	4620      	mov	r0, r4
   d5c40:	bd10      	pop	{r4, pc}
   d5c42:	bf00      	nop
   d5c44:	000d67b8 	.word	0x000d67b8

000d5c48 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5c48:	7c00      	ldrb	r0, [r0, #16]
   d5c4a:	f7ff bc0f 	b.w	d546c <HAL_USART_Is_Enabled>
	...

000d5c50 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5c50:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5c52:	4d0c      	ldr	r5, [pc, #48]	; (d5c84 <_Z22__fetch_global_Serial1v+0x34>)
   d5c54:	6829      	ldr	r1, [r5, #0]
   d5c56:	f011 0401 	ands.w	r4, r1, #1
   d5c5a:	d111      	bne.n	d5c80 <_Z22__fetch_global_Serial1v+0x30>
   d5c5c:	4628      	mov	r0, r5
   d5c5e:	f7fe fa1e 	bl	d409e <__cxa_guard_acquire>
   d5c62:	b168      	cbz	r0, d5c80 <_Z22__fetch_global_Serial1v+0x30>
   d5c64:	4a08      	ldr	r2, [pc, #32]	; (d5c88 <_Z22__fetch_global_Serial1v+0x38>)
   d5c66:	4b09      	ldr	r3, [pc, #36]	; (d5c8c <_Z22__fetch_global_Serial1v+0x3c>)
   d5c68:	4809      	ldr	r0, [pc, #36]	; (d5c90 <_Z22__fetch_global_Serial1v+0x40>)
   d5c6a:	4621      	mov	r1, r4
   d5c6c:	f7ff ffd6 	bl	d5c1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5c70:	4628      	mov	r0, r5
   d5c72:	f7fe fa19 	bl	d40a8 <__cxa_guard_release>
   d5c76:	4a07      	ldr	r2, [pc, #28]	; (d5c94 <_Z22__fetch_global_Serial1v+0x44>)
   d5c78:	4907      	ldr	r1, [pc, #28]	; (d5c98 <_Z22__fetch_global_Serial1v+0x48>)
   d5c7a:	4805      	ldr	r0, [pc, #20]	; (d5c90 <_Z22__fetch_global_Serial1v+0x40>)
   d5c7c:	f000 fa72 	bl	d6164 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5c80:	4803      	ldr	r0, [pc, #12]	; (d5c90 <_Z22__fetch_global_Serial1v+0x40>)
   d5c82:	bd38      	pop	{r3, r4, r5, pc}
   d5c84:	2003e4ac 	.word	0x2003e4ac
   d5c88:	2003e4b0 	.word	0x2003e4b0
   d5c8c:	2003e428 	.word	0x2003e428
   d5c90:	2003e414 	.word	0x2003e414
   d5c94:	2003e338 	.word	0x2003e338
   d5c98:	000d5bc9 	.word	0x000d5bc9

000d5c9c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5c9c:	4770      	bx	lr

000d5c9e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ca0:	4606      	mov	r6, r0
   d5ca2:	4615      	mov	r5, r2
   d5ca4:	460c      	mov	r4, r1
   d5ca6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ca8:	42bc      	cmp	r4, r7
   d5caa:	d006      	beq.n	d5cba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5cac:	6833      	ldr	r3, [r6, #0]
   d5cae:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5cb2:	689b      	ldr	r3, [r3, #8]
   d5cb4:	4630      	mov	r0, r6
   d5cb6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5cb8:	e7f6      	b.n	d5ca8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5cba:	4628      	mov	r0, r5
   d5cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cbe <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5cbe:	2200      	movs	r2, #0
   d5cc0:	7c00      	ldrb	r0, [r0, #16]
   d5cc2:	f7ff bc03 	b.w	d54cc <HAL_I2C_Write_Data>

000d5cc6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5cc6:	2100      	movs	r1, #0
   d5cc8:	7c00      	ldrb	r0, [r0, #16]
   d5cca:	f7ff bc07 	b.w	d54dc <HAL_I2C_Available_Data>

000d5cce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5cce:	2100      	movs	r1, #0
   d5cd0:	7c00      	ldrb	r0, [r0, #16]
   d5cd2:	f7ff bc0b 	b.w	d54ec <HAL_I2C_Read_Data>

000d5cd6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5cd6:	2100      	movs	r1, #0
   d5cd8:	7c00      	ldrb	r0, [r0, #16]
   d5cda:	f7ff bc0f 	b.w	d54fc <HAL_I2C_Peek_Data>

000d5cde <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5cde:	2100      	movs	r1, #0
   d5ce0:	7c00      	ldrb	r0, [r0, #16]
   d5ce2:	f7ff bc13 	b.w	d550c <HAL_I2C_Flush_Data>

000d5ce6 <_ZN7TwoWireD0Ev>:
   d5ce6:	b510      	push	{r4, lr}
   d5ce8:	4604      	mov	r4, r0
   d5cea:	f7fe f9d4 	bl	d4096 <_ZdlPv>
   d5cee:	4620      	mov	r0, r4
   d5cf0:	bd10      	pop	{r4, pc}
	...

000d5cf4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5cf4:	b510      	push	{r4, lr}
   d5cf6:	4604      	mov	r4, r0
   d5cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5cfc:	4608      	mov	r0, r1
   d5cfe:	60a3      	str	r3, [r4, #8]
   d5d00:	2100      	movs	r1, #0
   d5d02:	4b04      	ldr	r3, [pc, #16]	; (d5d14 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5d04:	7420      	strb	r0, [r4, #16]
   d5d06:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5d08:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5d0a:	f7ff fc0f 	bl	d552c <HAL_I2C_Init>

}
   d5d0e:	4620      	mov	r0, r4
   d5d10:	bd10      	pop	{r4, pc}
   d5d12:	bf00      	nop
   d5d14:	000d67e8 	.word	0x000d67e8

000d5d18 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5d18:	2300      	movs	r3, #0
   d5d1a:	461a      	mov	r2, r3
   d5d1c:	4619      	mov	r1, r3
   d5d1e:	7c00      	ldrb	r0, [r0, #16]
   d5d20:	f7ff bbb4 	b.w	d548c <HAL_I2C_Begin>

000d5d24 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5d24:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d5d26:	2400      	movs	r4, #0
   d5d28:	7c00      	ldrb	r0, [r0, #16]
   d5d2a:	9400      	str	r4, [sp, #0]
   d5d2c:	f7ff fbb6 	bl	d549c <HAL_I2C_Request_Data>
  return result;
}
   d5d30:	b2c0      	uxtb	r0, r0
   d5d32:	b002      	add	sp, #8
   d5d34:	bd10      	pop	{r4, pc}

000d5d36 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d5d36:	2301      	movs	r3, #1
   d5d38:	b2d2      	uxtb	r2, r2
   d5d3a:	b2c9      	uxtb	r1, r1
   d5d3c:	f7ff bff2 	b.w	d5d24 <_ZN7TwoWire11requestFromEhhh>

000d5d40 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5d40:	2200      	movs	r2, #0
   d5d42:	7c00      	ldrb	r0, [r0, #16]
   d5d44:	f7ff bbb2 	b.w	d54ac <HAL_I2C_Begin_Transmission>

000d5d48 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5d48:	b2c9      	uxtb	r1, r1
   d5d4a:	f7ff bff9 	b.w	d5d40 <_ZN7TwoWire17beginTransmissionEh>

000d5d4e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5d4e:	2200      	movs	r2, #0
   d5d50:	7c00      	ldrb	r0, [r0, #16]
   d5d52:	f7ff bbb3 	b.w	d54bc <HAL_I2C_End_Transmission>

000d5d56 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5d56:	2101      	movs	r1, #1
   d5d58:	f7ff bff9 	b.w	d5d4e <_ZN7TwoWire15endTransmissionEh>

000d5d5c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5d5c:	2100      	movs	r1, #0
   d5d5e:	7c00      	ldrb	r0, [r0, #16]
   d5d60:	f7ff bbdc 	b.w	d551c <HAL_I2C_Is_Enabled>

000d5d64 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d64:	2200      	movs	r2, #0
   d5d66:	4611      	mov	r1, r2
   d5d68:	6840      	ldr	r0, [r0, #4]
   d5d6a:	f7ff bc7b 	b.w	d5664 <network_listening>

000d5d6e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5d6e:	2200      	movs	r2, #0
   d5d70:	4611      	mov	r1, r2
   d5d72:	6840      	ldr	r0, [r0, #4]
   d5d74:	f7ff bc86 	b.w	d5684 <network_get_listen_timeout>

000d5d78 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5d78:	2200      	movs	r2, #0
   d5d7a:	6840      	ldr	r0, [r0, #4]
   d5d7c:	f7ff bc7a 	b.w	d5674 <network_set_listen_timeout>

000d5d80 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d80:	2200      	movs	r2, #0
   d5d82:	f081 0101 	eor.w	r1, r1, #1
   d5d86:	6840      	ldr	r0, [r0, #4]
   d5d88:	f7ff bc64 	b.w	d5654 <network_listen>

000d5d8c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5d8c:	2300      	movs	r3, #0
   d5d8e:	461a      	mov	r2, r3
   d5d90:	4619      	mov	r1, r3
   d5d92:	6840      	ldr	r0, [r0, #4]
   d5d94:	f7ff bc56 	b.w	d5644 <network_off>

000d5d98 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5d98:	2300      	movs	r3, #0
   d5d9a:	461a      	mov	r2, r3
   d5d9c:	4619      	mov	r1, r3
   d5d9e:	6840      	ldr	r0, [r0, #4]
   d5da0:	f7ff bc48 	b.w	d5634 <network_on>

000d5da4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5da4:	2200      	movs	r2, #0
   d5da6:	4611      	mov	r1, r2
   d5da8:	6840      	ldr	r0, [r0, #4]
   d5daa:	f7ff bc3b 	b.w	d5624 <network_ready>

000d5dae <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5dae:	2200      	movs	r2, #0
   d5db0:	4611      	mov	r1, r2
   d5db2:	6840      	ldr	r0, [r0, #4]
   d5db4:	f7ff bc26 	b.w	d5604 <network_connecting>

000d5db8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5db8:	2200      	movs	r2, #0
   d5dba:	2102      	movs	r1, #2
   d5dbc:	6840      	ldr	r0, [r0, #4]
   d5dbe:	f7ff bc29 	b.w	d5614 <network_disconnect>

000d5dc2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5dc2:	2300      	movs	r3, #0
   d5dc4:	461a      	mov	r2, r3
   d5dc6:	6840      	ldr	r0, [r0, #4]
   d5dc8:	f7ff bc14 	b.w	d55f4 <network_connect>

000d5dcc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5dcc:	b110      	cbz	r0, d5dd4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5dce:	6803      	ldr	r3, [r0, #0]
   d5dd0:	685b      	ldr	r3, [r3, #4]
   d5dd2:	4718      	bx	r3
   d5dd4:	4770      	bx	lr

000d5dd6 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d5dd6:	b538      	push	{r3, r4, r5, lr}
   d5dd8:	4604      	mov	r4, r0
   d5dda:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d5ddc:	b1d0      	cbz	r0, d5e14 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d5dde:	f7ff fae5 	bl	d53ac <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d5de2:	b9b8      	cbnz	r0, d5e14 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d5de4:	7c23      	ldrb	r3, [r4, #16]
   d5de6:	b91b      	cbnz	r3, d5df0 <_ZN6Thread7disposeEv+0x1a>
   d5de8:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d5dea:	b108      	cbz	r0, d5df0 <_ZN6Thread7disposeEv+0x1a>
   d5dec:	f7ff fae6 	bl	d53bc <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d5df0:	6865      	ldr	r5, [r4, #4]
   d5df2:	b155      	cbz	r5, d5e0a <_ZN6Thread7disposeEv+0x34>

    ~_Function_base()
    {
      if (_M_manager)
   d5df4:	68ab      	ldr	r3, [r5, #8]
   d5df6:	b11b      	cbz	r3, d5e00 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5df8:	2203      	movs	r2, #3
   d5dfa:	4629      	mov	r1, r5
   d5dfc:	4628      	mov	r0, r5
   d5dfe:	4798      	blx	r3
            delete wrapper;
   d5e00:	4628      	mov	r0, r5
   d5e02:	f7fe f948 	bl	d4096 <_ZdlPv>
            wrapper = NULL;
   d5e06:	2300      	movs	r3, #0
   d5e08:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d5e0a:	6820      	ldr	r0, [r4, #0]
   d5e0c:	f7ff fade 	bl	d53cc <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d5e10:	2300      	movs	r3, #0
   d5e12:	6023      	str	r3, [r4, #0]
   d5e14:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5e18 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5e18:	b538      	push	{r3, r4, r5, lr}
   d5e1a:	4b0b      	ldr	r3, [pc, #44]	; (d5e48 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5e1c:	6003      	str	r3, [r0, #0]
   d5e1e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e20:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5e24:	b108      	cbz	r0, d5e2a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5e26:	f7fe f938 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e2a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5e2e:	b12d      	cbz	r5, d5e3c <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d5e30:	4628      	mov	r0, r5
   d5e32:	f7ff ffd0 	bl	d5dd6 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e36:	4628      	mov	r0, r5
   d5e38:	f7fe f92d 	bl	d4096 <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e3c:	68a0      	ldr	r0, [r4, #8]
   d5e3e:	b108      	cbz	r0, d5e44 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d5e40:	f7ff ffc4 	bl	d5dcc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5e44:	4620      	mov	r0, r4
   d5e46:	bd38      	pop	{r3, r4, r5, pc}
   d5e48:	000d6810 	.word	0x000d6810

000d5e4c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5e4c:	b538      	push	{r3, r4, r5, lr}
   d5e4e:	4c0d      	ldr	r4, [pc, #52]	; (d5e84 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5e50:	4b0d      	ldr	r3, [pc, #52]	; (d5e88 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5e52:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5e54:	2500      	movs	r5, #0
   d5e56:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5e58:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5e5c:	6063      	str	r3, [r4, #4]
   d5e5e:	60a5      	str	r5, [r4, #8]
   d5e60:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5e64:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5e68:	f7ff fac0 	bl	d53ec <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5e6c:	4b07      	ldr	r3, [pc, #28]	; (d5e8c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5e6e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5e72:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5e74:	4620      	mov	r0, r4
   d5e76:	4a06      	ldr	r2, [pc, #24]	; (d5e90 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5e78:	4906      	ldr	r1, [pc, #24]	; (d5e94 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5e7e:	f000 b971 	b.w	d6164 <__aeabi_atexit>
   d5e82:	bf00      	nop
   d5e84:	2003e534 	.word	0x2003e534
   d5e88:	000d6878 	.word	0x000d6878
   d5e8c:	000d6810 	.word	0x000d6810
   d5e90:	2003e338 	.word	0x2003e338
   d5e94:	000d5e19 	.word	0x000d5e19

000d5e98 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5e98:	2200      	movs	r2, #0
   d5e9a:	4611      	mov	r1, r2
   d5e9c:	6840      	ldr	r0, [r0, #4]
   d5e9e:	f7ff bbc1 	b.w	d5624 <network_ready>

000d5ea2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ea2:	2200      	movs	r2, #0
   d5ea4:	4611      	mov	r1, r2
   d5ea6:	6840      	ldr	r0, [r0, #4]
   d5ea8:	f7ff bbdc 	b.w	d5664 <network_listening>

000d5eac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5eac:	2200      	movs	r2, #0
   d5eae:	4611      	mov	r1, r2
   d5eb0:	6840      	ldr	r0, [r0, #4]
   d5eb2:	f7ff bbe7 	b.w	d5684 <network_get_listen_timeout>

000d5eb6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5eb6:	2200      	movs	r2, #0
   d5eb8:	6840      	ldr	r0, [r0, #4]
   d5eba:	f7ff bbdb 	b.w	d5674 <network_set_listen_timeout>

000d5ebe <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ebe:	2200      	movs	r2, #0
   d5ec0:	f081 0101 	eor.w	r1, r1, #1
   d5ec4:	6840      	ldr	r0, [r0, #4]
   d5ec6:	f7ff bbc5 	b.w	d5654 <network_listen>

000d5eca <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5eca:	2300      	movs	r3, #0
   d5ecc:	461a      	mov	r2, r3
   d5ece:	4619      	mov	r1, r3
   d5ed0:	6840      	ldr	r0, [r0, #4]
   d5ed2:	f7ff bbb7 	b.w	d5644 <network_off>

000d5ed6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5ed6:	2300      	movs	r3, #0
   d5ed8:	461a      	mov	r2, r3
   d5eda:	4619      	mov	r1, r3
   d5edc:	6840      	ldr	r0, [r0, #4]
   d5ede:	f7ff bba9 	b.w	d5634 <network_on>

000d5ee2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ee2:	2200      	movs	r2, #0
   d5ee4:	4611      	mov	r1, r2
   d5ee6:	6840      	ldr	r0, [r0, #4]
   d5ee8:	f7ff bb8c 	b.w	d5604 <network_connecting>

000d5eec <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5eec:	2200      	movs	r2, #0
   d5eee:	2102      	movs	r1, #2
   d5ef0:	6840      	ldr	r0, [r0, #4]
   d5ef2:	f7ff bb8f 	b.w	d5614 <network_disconnect>

000d5ef6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5ef6:	2300      	movs	r3, #0
   d5ef8:	461a      	mov	r2, r3
   d5efa:	6840      	ldr	r0, [r0, #4]
   d5efc:	f7ff bb7a 	b.w	d55f4 <network_connect>

000d5f00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5f00:	4b02      	ldr	r3, [pc, #8]	; (d5f0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5f02:	2204      	movs	r2, #4
   d5f04:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5f06:	4a02      	ldr	r2, [pc, #8]	; (d5f10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5f08:	601a      	str	r2, [r3, #0]
   d5f0a:	4770      	bx	lr
   d5f0c:	2003e704 	.word	0x2003e704
   d5f10:	000d6844 	.word	0x000d6844

000d5f14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5f14:	2300      	movs	r3, #0
   d5f16:	461a      	mov	r2, r3
   d5f18:	6840      	ldr	r0, [r0, #4]
   d5f1a:	f7ff bb6b 	b.w	d55f4 <network_connect>

000d5f1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5f1e:	2200      	movs	r2, #0
   d5f20:	2102      	movs	r1, #2
   d5f22:	6840      	ldr	r0, [r0, #4]
   d5f24:	f7ff bb76 	b.w	d5614 <network_disconnect>

000d5f28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5f28:	2200      	movs	r2, #0
   d5f2a:	4611      	mov	r1, r2
   d5f2c:	6840      	ldr	r0, [r0, #4]
   d5f2e:	f7ff bb69 	b.w	d5604 <network_connecting>

000d5f32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5f32:	2200      	movs	r2, #0
   d5f34:	4611      	mov	r1, r2
   d5f36:	6840      	ldr	r0, [r0, #4]
   d5f38:	f7ff bb74 	b.w	d5624 <network_ready>

000d5f3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5f3c:	2300      	movs	r3, #0
   d5f3e:	461a      	mov	r2, r3
   d5f40:	4619      	mov	r1, r3
   d5f42:	6840      	ldr	r0, [r0, #4]
   d5f44:	f7ff bb76 	b.w	d5634 <network_on>

000d5f48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5f48:	2300      	movs	r3, #0
   d5f4a:	461a      	mov	r2, r3
   d5f4c:	4619      	mov	r1, r3
   d5f4e:	6840      	ldr	r0, [r0, #4]
   d5f50:	f7ff bb78 	b.w	d5644 <network_off>

000d5f54 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5f54:	2200      	movs	r2, #0
   d5f56:	f081 0101 	eor.w	r1, r1, #1
   d5f5a:	6840      	ldr	r0, [r0, #4]
   d5f5c:	f7ff bb7a 	b.w	d5654 <network_listen>

000d5f60 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5f60:	2200      	movs	r2, #0
   d5f62:	6840      	ldr	r0, [r0, #4]
   d5f64:	f7ff bb86 	b.w	d5674 <network_set_listen_timeout>

000d5f68 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5f68:	2200      	movs	r2, #0
   d5f6a:	4611      	mov	r1, r2
   d5f6c:	6840      	ldr	r0, [r0, #4]
   d5f6e:	f7ff bb89 	b.w	d5684 <network_get_listen_timeout>

000d5f72 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5f72:	2200      	movs	r2, #0
   d5f74:	4611      	mov	r1, r2
   d5f76:	6840      	ldr	r0, [r0, #4]
   d5f78:	f7ff bb74 	b.w	d5664 <network_listening>

000d5f7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5f7c:	b570      	push	{r4, r5, r6, lr}
   d5f7e:	b08c      	sub	sp, #48	; 0x30
   d5f80:	4614      	mov	r4, r2
   d5f82:	4606      	mov	r6, r0
    IPAddress addr;
   d5f84:	f7ff fd78 	bl	d5a78 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5f88:	ab0c      	add	r3, sp, #48	; 0x30
   d5f8a:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5f8c:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5f8e:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5f92:	4620      	mov	r0, r4
   d5f94:	f7ff f9a2 	bl	d52dc <netdb_getaddrinfo>
    if (!r && ai) {
   d5f98:	4601      	mov	r1, r0
   d5f9a:	bb58      	cbnz	r0, d5ff4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d5f9c:	9b00      	ldr	r3, [sp, #0]
   d5f9e:	b34b      	cbz	r3, d5ff4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d5fa0:	685a      	ldr	r2, [r3, #4]
   d5fa2:	2a02      	cmp	r2, #2
   d5fa4:	d00e      	beq.n	d5fc4 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d5fa6:	2a0a      	cmp	r2, #10
   d5fa8:	d124      	bne.n	d5ff4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d5faa:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d5fac:	2211      	movs	r2, #17
   d5fae:	a801      	add	r0, sp, #4
   d5fb0:	f000 fa3f 	bl	d6432 <memset>
                a.v = 6;
   d5fb4:	2306      	movs	r3, #6
   d5fb6:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5fba:	ad01      	add	r5, sp, #4
   d5fbc:	f104 0308 	add.w	r3, r4, #8
   d5fc0:	3418      	adds	r4, #24
   d5fc2:	e005      	b.n	d5fd0 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5fc4:	6959      	ldr	r1, [r3, #20]
   d5fc6:	4630      	mov	r0, r6
   d5fc8:	3104      	adds	r1, #4
   d5fca:	f7ff fd82 	bl	d5ad2 <_ZN9IPAddressaSEPKh>
                break;
   d5fce:	e011      	b.n	d5ff4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5fd0:	6818      	ldr	r0, [r3, #0]
   d5fd2:	6859      	ldr	r1, [r3, #4]
   d5fd4:	462a      	mov	r2, r5
   d5fd6:	c203      	stmia	r2!, {r0, r1}
   d5fd8:	3308      	adds	r3, #8
   d5fda:	42a3      	cmp	r3, r4
   d5fdc:	4615      	mov	r5, r2
   d5fde:	d1f7      	bne.n	d5fd0 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d5fe0:	a901      	add	r1, sp, #4
   d5fe2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5fe4:	ad07      	add	r5, sp, #28
   d5fe6:	f7ff fd55 	bl	d5a94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5fea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5fec:	1d34      	adds	r4, r6, #4
   d5fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ff0:	682b      	ldr	r3, [r5, #0]
   d5ff2:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d5ff4:	9800      	ldr	r0, [sp, #0]
   d5ff6:	f7ff f969 	bl	d52cc <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5ffa:	4630      	mov	r0, r6
   d5ffc:	b00c      	add	sp, #48	; 0x30
   d5ffe:	bd70      	pop	{r4, r5, r6, pc}

000d6000 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6000:	4b02      	ldr	r3, [pc, #8]	; (d600c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6002:	4a03      	ldr	r2, [pc, #12]	; (d6010 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6004:	601a      	str	r2, [r3, #0]
   d6006:	2200      	movs	r2, #0
   d6008:	605a      	str	r2, [r3, #4]
   d600a:	4770      	bx	lr
   d600c:	2003e70c 	.word	0x2003e70c
   d6010:	000d6878 	.word	0x000d6878

000d6014 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6014:	b510      	push	{r4, lr}
   d6016:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6018:	480f      	ldr	r0, [pc, #60]	; (d6058 <pinAvailable+0x44>)
   d601a:	f7ff fbad 	bl	d5778 <_ZN8SPIClass9isEnabledEv>
   d601e:	b128      	cbz	r0, d602c <pinAvailable+0x18>
   d6020:	f1a4 030b 	sub.w	r3, r4, #11
   d6024:	2b02      	cmp	r3, #2
   d6026:	d801      	bhi.n	d602c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6028:	2000      	movs	r0, #0
   d602a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d602c:	f000 f87a 	bl	d6124 <_Z19__fetch_global_Wirev>
   d6030:	f7ff fe94 	bl	d5d5c <_ZN7TwoWire9isEnabledEv>
   d6034:	b108      	cbz	r0, d603a <pinAvailable+0x26>
   d6036:	2c01      	cmp	r4, #1
   d6038:	d9f6      	bls.n	d6028 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d603a:	f7ff fe09 	bl	d5c50 <_Z22__fetch_global_Serial1v>
   d603e:	f7ff fe03 	bl	d5c48 <_ZN11USARTSerial9isEnabledEv>
   d6042:	b118      	cbz	r0, d604c <pinAvailable+0x38>
   d6044:	f1a4 0309 	sub.w	r3, r4, #9
   d6048:	2b01      	cmp	r3, #1
   d604a:	d9ed      	bls.n	d6028 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d604c:	2c23      	cmp	r4, #35	; 0x23
   d604e:	bf8c      	ite	hi
   d6050:	2000      	movhi	r0, #0
   d6052:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6054:	bd10      	pop	{r4, pc}
   d6056:	bf00      	nop
   d6058:	2003e714 	.word	0x2003e714

000d605c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d605c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d605e:	b538      	push	{r3, r4, r5, lr}
   d6060:	4604      	mov	r4, r0
   d6062:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6064:	d80a      	bhi.n	d607c <pinMode+0x20>
   d6066:	29ff      	cmp	r1, #255	; 0xff
   d6068:	d008      	beq.n	d607c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d606a:	f7ff ffd3 	bl	d6014 <pinAvailable>
   d606e:	b128      	cbz	r0, d607c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6070:	4629      	mov	r1, r5
   d6072:	4620      	mov	r0, r4
}
   d6074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6078:	f7ff b948 	b.w	d530c <HAL_Pin_Mode>
   d607c:	bd38      	pop	{r3, r4, r5, pc}

000d607e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d607e:	b538      	push	{r3, r4, r5, lr}
   d6080:	4604      	mov	r4, r0
   d6082:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6084:	f7ff f94a 	bl	d531c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6088:	28ff      	cmp	r0, #255	; 0xff
   d608a:	d010      	beq.n	d60ae <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d608c:	2806      	cmp	r0, #6
   d608e:	d804      	bhi.n	d609a <digitalWrite+0x1c>
   d6090:	234d      	movs	r3, #77	; 0x4d
   d6092:	fa23 f000 	lsr.w	r0, r3, r0
   d6096:	07c3      	lsls	r3, r0, #31
   d6098:	d409      	bmi.n	d60ae <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d609a:	4620      	mov	r0, r4
   d609c:	f7ff ffba 	bl	d6014 <pinAvailable>
   d60a0:	b128      	cbz	r0, d60ae <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d60a2:	4629      	mov	r1, r5
   d60a4:	4620      	mov	r0, r4
}
   d60a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d60aa:	f7ff b93f 	b.w	d532c <HAL_GPIO_Write>
   d60ae:	bd38      	pop	{r3, r4, r5, pc}

000d60b0 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d60b0:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d60b2:	b510      	push	{r4, lr}
   d60b4:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d60b6:	bf9c      	itt	ls
   d60b8:	340e      	addls	r4, #14
   d60ba:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d60bc:	4620      	mov	r0, r4
   d60be:	f7ff ffa9 	bl	d6014 <pinAvailable>
   d60c2:	b150      	cbz	r0, d60da <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d60c4:	2103      	movs	r1, #3
   d60c6:	4620      	mov	r0, r4
   d60c8:	f7ff f918 	bl	d52fc <HAL_Validate_Pin_Function>
   d60cc:	2803      	cmp	r0, #3
   d60ce:	d104      	bne.n	d60da <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d60d0:	4620      	mov	r0, r4
}
   d60d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d60d6:	f7ff b931 	b.w	d533c <HAL_ADC_Read>
}
   d60da:	2000      	movs	r0, #0
   d60dc:	bd10      	pop	{r4, pc}
	...

000d60e0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d60e0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d60e2:	4c0c      	ldr	r4, [pc, #48]	; (d6114 <_GLOBAL__sub_I_SPI+0x34>)
   d60e4:	4e0c      	ldr	r6, [pc, #48]	; (d6118 <_GLOBAL__sub_I_SPI+0x38>)
   d60e6:	4d0d      	ldr	r5, [pc, #52]	; (d611c <_GLOBAL__sub_I_SPI+0x3c>)
   d60e8:	2100      	movs	r1, #0
   d60ea:	4620      	mov	r0, r4
   d60ec:	f7ff fb30 	bl	d5750 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d60f0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d60f2:	4c0b      	ldr	r4, [pc, #44]	; (d6120 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d60f4:	4632      	mov	r2, r6
   d60f6:	4629      	mov	r1, r5
   d60f8:	f000 f834 	bl	d6164 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d60fc:	2101      	movs	r1, #1
   d60fe:	4620      	mov	r0, r4
   d6100:	f7ff fb26 	bl	d5750 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6104:	4632      	mov	r2, r6
   d6106:	4629      	mov	r1, r5
   d6108:	4620      	mov	r0, r4
   d610a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d610e:	f000 b829 	b.w	d6164 <__aeabi_atexit>
   d6112:	bf00      	nop
   d6114:	2003e714 	.word	0x2003e714
   d6118:	2003e338 	.word	0x2003e338
   d611c:	000d5741 	.word	0x000d5741
   d6120:	2003e724 	.word	0x2003e724

000d6124 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6124:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6126:	4d0b      	ldr	r5, [pc, #44]	; (d6154 <_Z19__fetch_global_Wirev+0x30>)
   d6128:	6829      	ldr	r1, [r5, #0]
   d612a:	f011 0401 	ands.w	r4, r1, #1
   d612e:	d10f      	bne.n	d6150 <_Z19__fetch_global_Wirev+0x2c>
   d6130:	4628      	mov	r0, r5
   d6132:	f7fd ffb4 	bl	d409e <__cxa_guard_acquire>
   d6136:	b158      	cbz	r0, d6150 <_Z19__fetch_global_Wirev+0x2c>
   d6138:	4621      	mov	r1, r4
   d613a:	4807      	ldr	r0, [pc, #28]	; (d6158 <_Z19__fetch_global_Wirev+0x34>)
   d613c:	f7ff fdda 	bl	d5cf4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6140:	4628      	mov	r0, r5
   d6142:	f7fd ffb1 	bl	d40a8 <__cxa_guard_release>
   d6146:	4a05      	ldr	r2, [pc, #20]	; (d615c <_Z19__fetch_global_Wirev+0x38>)
   d6148:	4905      	ldr	r1, [pc, #20]	; (d6160 <_Z19__fetch_global_Wirev+0x3c>)
   d614a:	4803      	ldr	r0, [pc, #12]	; (d6158 <_Z19__fetch_global_Wirev+0x34>)
   d614c:	f000 f80a 	bl	d6164 <__aeabi_atexit>
	return wire;
}
   d6150:	4801      	ldr	r0, [pc, #4]	; (d6158 <_Z19__fetch_global_Wirev+0x34>)
   d6152:	bd38      	pop	{r3, r4, r5, pc}
   d6154:	2003e738 	.word	0x2003e738
   d6158:	2003e73c 	.word	0x2003e73c
   d615c:	2003e338 	.word	0x2003e338
   d6160:	000d5c9d 	.word	0x000d5c9d

000d6164 <__aeabi_atexit>:
   d6164:	460b      	mov	r3, r1
   d6166:	4601      	mov	r1, r0
   d6168:	4618      	mov	r0, r3
   d616a:	f000 b949 	b.w	d6400 <__cxa_atexit>
	...

000d6170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6170:	4b18      	ldr	r3, [pc, #96]	; (d61d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6172:	681a      	ldr	r2, [r3, #0]
   d6174:	07d1      	lsls	r1, r2, #31
   d6176:	bf5c      	itt	pl
   d6178:	2201      	movpl	r2, #1
   d617a:	601a      	strpl	r2, [r3, #0]
   d617c:	4b16      	ldr	r3, [pc, #88]	; (d61d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d617e:	681a      	ldr	r2, [r3, #0]
   d6180:	07d2      	lsls	r2, r2, #31
   d6182:	bf5c      	itt	pl
   d6184:	2201      	movpl	r2, #1
   d6186:	601a      	strpl	r2, [r3, #0]
   d6188:	4b14      	ldr	r3, [pc, #80]	; (d61dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d618a:	681a      	ldr	r2, [r3, #0]
   d618c:	07d0      	lsls	r0, r2, #31
   d618e:	bf5c      	itt	pl
   d6190:	2201      	movpl	r2, #1
   d6192:	601a      	strpl	r2, [r3, #0]
   d6194:	4b12      	ldr	r3, [pc, #72]	; (d61e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6196:	681a      	ldr	r2, [r3, #0]
   d6198:	07d1      	lsls	r1, r2, #31
   d619a:	bf5c      	itt	pl
   d619c:	2201      	movpl	r2, #1
   d619e:	601a      	strpl	r2, [r3, #0]
   d61a0:	4b10      	ldr	r3, [pc, #64]	; (d61e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d61a2:	681a      	ldr	r2, [r3, #0]
   d61a4:	07d2      	lsls	r2, r2, #31
   d61a6:	bf5c      	itt	pl
   d61a8:	2201      	movpl	r2, #1
   d61aa:	601a      	strpl	r2, [r3, #0]
   d61ac:	4b0e      	ldr	r3, [pc, #56]	; (d61e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d61ae:	681a      	ldr	r2, [r3, #0]
   d61b0:	07d0      	lsls	r0, r2, #31
   d61b2:	bf5c      	itt	pl
   d61b4:	2201      	movpl	r2, #1
   d61b6:	601a      	strpl	r2, [r3, #0]
   d61b8:	4b0c      	ldr	r3, [pc, #48]	; (d61ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d61ba:	681a      	ldr	r2, [r3, #0]
   d61bc:	07d1      	lsls	r1, r2, #31
   d61be:	bf5c      	itt	pl
   d61c0:	2201      	movpl	r2, #1
   d61c2:	601a      	strpl	r2, [r3, #0]
   d61c4:	4b0a      	ldr	r3, [pc, #40]	; (d61f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d61c6:	681a      	ldr	r2, [r3, #0]
   d61c8:	07d2      	lsls	r2, r2, #31
   d61ca:	bf5c      	itt	pl
   d61cc:	2201      	movpl	r2, #1
   d61ce:	601a      	strpl	r2, [r3, #0]
   d61d0:	4770      	bx	lr
   d61d2:	bf00      	nop
   d61d4:	2003e76c 	.word	0x2003e76c
   d61d8:	2003e768 	.word	0x2003e768
   d61dc:	2003e764 	.word	0x2003e764
   d61e0:	2003e760 	.word	0x2003e760
   d61e4:	2003e75c 	.word	0x2003e75c
   d61e8:	2003e758 	.word	0x2003e758
   d61ec:	2003e754 	.word	0x2003e754
   d61f0:	2003e750 	.word	0x2003e750

000d61f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d61f4:	4b24      	ldr	r3, [pc, #144]	; (d6288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d61f6:	681a      	ldr	r2, [r3, #0]
   d61f8:	07d0      	lsls	r0, r2, #31
   d61fa:	bf5c      	itt	pl
   d61fc:	2201      	movpl	r2, #1
   d61fe:	601a      	strpl	r2, [r3, #0]
   d6200:	4b22      	ldr	r3, [pc, #136]	; (d628c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6202:	681a      	ldr	r2, [r3, #0]
   d6204:	07d1      	lsls	r1, r2, #31
   d6206:	bf5c      	itt	pl
   d6208:	2201      	movpl	r2, #1
   d620a:	601a      	strpl	r2, [r3, #0]
   d620c:	4b20      	ldr	r3, [pc, #128]	; (d6290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d620e:	681a      	ldr	r2, [r3, #0]
   d6210:	07d2      	lsls	r2, r2, #31
   d6212:	bf5c      	itt	pl
   d6214:	2201      	movpl	r2, #1
   d6216:	601a      	strpl	r2, [r3, #0]
   d6218:	4b1e      	ldr	r3, [pc, #120]	; (d6294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d621a:	681a      	ldr	r2, [r3, #0]
   d621c:	07d0      	lsls	r0, r2, #31
   d621e:	bf5c      	itt	pl
   d6220:	2201      	movpl	r2, #1
   d6222:	601a      	strpl	r2, [r3, #0]
   d6224:	4b1c      	ldr	r3, [pc, #112]	; (d6298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6226:	681a      	ldr	r2, [r3, #0]
   d6228:	07d1      	lsls	r1, r2, #31
   d622a:	bf5c      	itt	pl
   d622c:	2201      	movpl	r2, #1
   d622e:	601a      	strpl	r2, [r3, #0]
   d6230:	4b1a      	ldr	r3, [pc, #104]	; (d629c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6232:	681a      	ldr	r2, [r3, #0]
   d6234:	07d2      	lsls	r2, r2, #31
   d6236:	bf5c      	itt	pl
   d6238:	2201      	movpl	r2, #1
   d623a:	601a      	strpl	r2, [r3, #0]
   d623c:	4b18      	ldr	r3, [pc, #96]	; (d62a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d623e:	681a      	ldr	r2, [r3, #0]
   d6240:	07d0      	lsls	r0, r2, #31
   d6242:	bf5c      	itt	pl
   d6244:	2201      	movpl	r2, #1
   d6246:	601a      	strpl	r2, [r3, #0]
   d6248:	4b16      	ldr	r3, [pc, #88]	; (d62a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d624a:	681a      	ldr	r2, [r3, #0]
   d624c:	07d1      	lsls	r1, r2, #31
   d624e:	bf5c      	itt	pl
   d6250:	2201      	movpl	r2, #1
   d6252:	601a      	strpl	r2, [r3, #0]
   d6254:	4b14      	ldr	r3, [pc, #80]	; (d62a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6256:	681a      	ldr	r2, [r3, #0]
   d6258:	07d2      	lsls	r2, r2, #31
   d625a:	bf5c      	itt	pl
   d625c:	2201      	movpl	r2, #1
   d625e:	601a      	strpl	r2, [r3, #0]
   d6260:	4b12      	ldr	r3, [pc, #72]	; (d62ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6262:	681a      	ldr	r2, [r3, #0]
   d6264:	07d0      	lsls	r0, r2, #31
   d6266:	bf5c      	itt	pl
   d6268:	2201      	movpl	r2, #1
   d626a:	601a      	strpl	r2, [r3, #0]
   d626c:	4b10      	ldr	r3, [pc, #64]	; (d62b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d626e:	681a      	ldr	r2, [r3, #0]
   d6270:	07d1      	lsls	r1, r2, #31
   d6272:	bf5c      	itt	pl
   d6274:	2201      	movpl	r2, #1
   d6276:	601a      	strpl	r2, [r3, #0]
   d6278:	4b0e      	ldr	r3, [pc, #56]	; (d62b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d627a:	681a      	ldr	r2, [r3, #0]
   d627c:	07d2      	lsls	r2, r2, #31
   d627e:	bf5c      	itt	pl
   d6280:	2201      	movpl	r2, #1
   d6282:	601a      	strpl	r2, [r3, #0]
   d6284:	4770      	bx	lr
   d6286:	bf00      	nop
   d6288:	2003e79c 	.word	0x2003e79c
   d628c:	2003e798 	.word	0x2003e798
   d6290:	2003e794 	.word	0x2003e794
   d6294:	2003e790 	.word	0x2003e790
   d6298:	2003e78c 	.word	0x2003e78c
   d629c:	2003e788 	.word	0x2003e788
   d62a0:	2003e784 	.word	0x2003e784
   d62a4:	2003e780 	.word	0x2003e780
   d62a8:	2003e77c 	.word	0x2003e77c
   d62ac:	2003e778 	.word	0x2003e778
   d62b0:	2003e774 	.word	0x2003e774
   d62b4:	2003e770 	.word	0x2003e770

000d62b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d62b8:	4b24      	ldr	r3, [pc, #144]	; (d634c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d62ba:	681a      	ldr	r2, [r3, #0]
   d62bc:	07d0      	lsls	r0, r2, #31
   d62be:	bf5c      	itt	pl
   d62c0:	2201      	movpl	r2, #1
   d62c2:	601a      	strpl	r2, [r3, #0]
   d62c4:	4b22      	ldr	r3, [pc, #136]	; (d6350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d62c6:	681a      	ldr	r2, [r3, #0]
   d62c8:	07d1      	lsls	r1, r2, #31
   d62ca:	bf5c      	itt	pl
   d62cc:	2201      	movpl	r2, #1
   d62ce:	601a      	strpl	r2, [r3, #0]
   d62d0:	4b20      	ldr	r3, [pc, #128]	; (d6354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d62d2:	681a      	ldr	r2, [r3, #0]
   d62d4:	07d2      	lsls	r2, r2, #31
   d62d6:	bf5c      	itt	pl
   d62d8:	2201      	movpl	r2, #1
   d62da:	601a      	strpl	r2, [r3, #0]
   d62dc:	4b1e      	ldr	r3, [pc, #120]	; (d6358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d62de:	681a      	ldr	r2, [r3, #0]
   d62e0:	07d0      	lsls	r0, r2, #31
   d62e2:	bf5c      	itt	pl
   d62e4:	2201      	movpl	r2, #1
   d62e6:	601a      	strpl	r2, [r3, #0]
   d62e8:	4b1c      	ldr	r3, [pc, #112]	; (d635c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d62ea:	681a      	ldr	r2, [r3, #0]
   d62ec:	07d1      	lsls	r1, r2, #31
   d62ee:	bf5c      	itt	pl
   d62f0:	2201      	movpl	r2, #1
   d62f2:	601a      	strpl	r2, [r3, #0]
   d62f4:	4b1a      	ldr	r3, [pc, #104]	; (d6360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d62f6:	681a      	ldr	r2, [r3, #0]
   d62f8:	07d2      	lsls	r2, r2, #31
   d62fa:	bf5c      	itt	pl
   d62fc:	2201      	movpl	r2, #1
   d62fe:	601a      	strpl	r2, [r3, #0]
   d6300:	4b18      	ldr	r3, [pc, #96]	; (d6364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6302:	681a      	ldr	r2, [r3, #0]
   d6304:	07d0      	lsls	r0, r2, #31
   d6306:	bf5c      	itt	pl
   d6308:	2201      	movpl	r2, #1
   d630a:	601a      	strpl	r2, [r3, #0]
   d630c:	4b16      	ldr	r3, [pc, #88]	; (d6368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d630e:	681a      	ldr	r2, [r3, #0]
   d6310:	07d1      	lsls	r1, r2, #31
   d6312:	bf5c      	itt	pl
   d6314:	2201      	movpl	r2, #1
   d6316:	601a      	strpl	r2, [r3, #0]
   d6318:	4b14      	ldr	r3, [pc, #80]	; (d636c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d631a:	681a      	ldr	r2, [r3, #0]
   d631c:	07d2      	lsls	r2, r2, #31
   d631e:	bf5c      	itt	pl
   d6320:	2201      	movpl	r2, #1
   d6322:	601a      	strpl	r2, [r3, #0]
   d6324:	4b12      	ldr	r3, [pc, #72]	; (d6370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6326:	681a      	ldr	r2, [r3, #0]
   d6328:	07d0      	lsls	r0, r2, #31
   d632a:	bf5c      	itt	pl
   d632c:	2201      	movpl	r2, #1
   d632e:	601a      	strpl	r2, [r3, #0]
   d6330:	4b10      	ldr	r3, [pc, #64]	; (d6374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6332:	681a      	ldr	r2, [r3, #0]
   d6334:	07d1      	lsls	r1, r2, #31
   d6336:	bf5c      	itt	pl
   d6338:	2201      	movpl	r2, #1
   d633a:	601a      	strpl	r2, [r3, #0]
   d633c:	4b0e      	ldr	r3, [pc, #56]	; (d6378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d633e:	681a      	ldr	r2, [r3, #0]
   d6340:	07d2      	lsls	r2, r2, #31
   d6342:	bf5c      	itt	pl
   d6344:	2201      	movpl	r2, #1
   d6346:	601a      	strpl	r2, [r3, #0]
   d6348:	4770      	bx	lr
   d634a:	bf00      	nop
   d634c:	2003e7cc 	.word	0x2003e7cc
   d6350:	2003e7c8 	.word	0x2003e7c8
   d6354:	2003e7c4 	.word	0x2003e7c4
   d6358:	2003e7c0 	.word	0x2003e7c0
   d635c:	2003e7bc 	.word	0x2003e7bc
   d6360:	2003e7b8 	.word	0x2003e7b8
   d6364:	2003e7b4 	.word	0x2003e7b4
   d6368:	2003e7b0 	.word	0x2003e7b0
   d636c:	2003e7ac 	.word	0x2003e7ac
   d6370:	2003e7a8 	.word	0x2003e7a8
   d6374:	2003e7a4 	.word	0x2003e7a4
   d6378:	2003e7a0 	.word	0x2003e7a0

000d637c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d637c:	4b18      	ldr	r3, [pc, #96]	; (d63e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d637e:	681a      	ldr	r2, [r3, #0]
   d6380:	07d1      	lsls	r1, r2, #31
   d6382:	bf5c      	itt	pl
   d6384:	2201      	movpl	r2, #1
   d6386:	601a      	strpl	r2, [r3, #0]
   d6388:	4b16      	ldr	r3, [pc, #88]	; (d63e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d638a:	681a      	ldr	r2, [r3, #0]
   d638c:	07d2      	lsls	r2, r2, #31
   d638e:	bf5c      	itt	pl
   d6390:	2201      	movpl	r2, #1
   d6392:	601a      	strpl	r2, [r3, #0]
   d6394:	4b14      	ldr	r3, [pc, #80]	; (d63e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6396:	681a      	ldr	r2, [r3, #0]
   d6398:	07d0      	lsls	r0, r2, #31
   d639a:	bf5c      	itt	pl
   d639c:	2201      	movpl	r2, #1
   d639e:	601a      	strpl	r2, [r3, #0]
   d63a0:	4b12      	ldr	r3, [pc, #72]	; (d63ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d63a2:	681a      	ldr	r2, [r3, #0]
   d63a4:	07d1      	lsls	r1, r2, #31
   d63a6:	bf5c      	itt	pl
   d63a8:	2201      	movpl	r2, #1
   d63aa:	601a      	strpl	r2, [r3, #0]
   d63ac:	4b10      	ldr	r3, [pc, #64]	; (d63f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d63ae:	681a      	ldr	r2, [r3, #0]
   d63b0:	07d2      	lsls	r2, r2, #31
   d63b2:	bf5c      	itt	pl
   d63b4:	2201      	movpl	r2, #1
   d63b6:	601a      	strpl	r2, [r3, #0]
   d63b8:	4b0e      	ldr	r3, [pc, #56]	; (d63f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63ba:	681a      	ldr	r2, [r3, #0]
   d63bc:	07d0      	lsls	r0, r2, #31
   d63be:	bf5c      	itt	pl
   d63c0:	2201      	movpl	r2, #1
   d63c2:	601a      	strpl	r2, [r3, #0]
   d63c4:	4b0c      	ldr	r3, [pc, #48]	; (d63f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63c6:	681a      	ldr	r2, [r3, #0]
   d63c8:	07d1      	lsls	r1, r2, #31
   d63ca:	bf5c      	itt	pl
   d63cc:	2201      	movpl	r2, #1
   d63ce:	601a      	strpl	r2, [r3, #0]
   d63d0:	4b0a      	ldr	r3, [pc, #40]	; (d63fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63d2:	681a      	ldr	r2, [r3, #0]
   d63d4:	07d2      	lsls	r2, r2, #31
   d63d6:	bf5c      	itt	pl
   d63d8:	2201      	movpl	r2, #1
   d63da:	601a      	strpl	r2, [r3, #0]
   d63dc:	4770      	bx	lr
   d63de:	bf00      	nop
   d63e0:	2003e7ec 	.word	0x2003e7ec
   d63e4:	2003e7e8 	.word	0x2003e7e8
   d63e8:	2003e7e4 	.word	0x2003e7e4
   d63ec:	2003e7e0 	.word	0x2003e7e0
   d63f0:	2003e7dc 	.word	0x2003e7dc
   d63f4:	2003e7d8 	.word	0x2003e7d8
   d63f8:	2003e7d4 	.word	0x2003e7d4
   d63fc:	2003e7d0 	.word	0x2003e7d0

000d6400 <__cxa_atexit>:
   d6400:	b510      	push	{r4, lr}
   d6402:	4c05      	ldr	r4, [pc, #20]	; (d6418 <__cxa_atexit+0x18>)
   d6404:	4613      	mov	r3, r2
   d6406:	b12c      	cbz	r4, d6414 <__cxa_atexit+0x14>
   d6408:	460a      	mov	r2, r1
   d640a:	4601      	mov	r1, r0
   d640c:	2002      	movs	r0, #2
   d640e:	f3af 8000 	nop.w
   d6412:	bd10      	pop	{r4, pc}
   d6414:	4620      	mov	r0, r4
   d6416:	bd10      	pop	{r4, pc}
   d6418:	00000000 	.word	0x00000000

000d641c <memcpy>:
   d641c:	b510      	push	{r4, lr}
   d641e:	1e43      	subs	r3, r0, #1
   d6420:	440a      	add	r2, r1
   d6422:	4291      	cmp	r1, r2
   d6424:	d004      	beq.n	d6430 <memcpy+0x14>
   d6426:	f811 4b01 	ldrb.w	r4, [r1], #1
   d642a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d642e:	e7f8      	b.n	d6422 <memcpy+0x6>
   d6430:	bd10      	pop	{r4, pc}

000d6432 <memset>:
   d6432:	4402      	add	r2, r0
   d6434:	4603      	mov	r3, r0
   d6436:	4293      	cmp	r3, r2
   d6438:	d002      	beq.n	d6440 <memset+0xe>
   d643a:	f803 1b01 	strb.w	r1, [r3], #1
   d643e:	e7fa      	b.n	d6436 <memset+0x4>
   d6440:	4770      	bx	lr
	...

000d6444 <srand>:
   d6444:	b538      	push	{r3, r4, r5, lr}
   d6446:	4b12      	ldr	r3, [pc, #72]	; (d6490 <srand+0x4c>)
   d6448:	681c      	ldr	r4, [r3, #0]
   d644a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d644c:	4605      	mov	r5, r0
   d644e:	b9d3      	cbnz	r3, d6486 <srand+0x42>
   d6450:	2018      	movs	r0, #24
   d6452:	f7ff f927 	bl	d56a4 <malloc>
   d6456:	f243 330e 	movw	r3, #13070	; 0x330e
   d645a:	63a0      	str	r0, [r4, #56]	; 0x38
   d645c:	8003      	strh	r3, [r0, #0]
   d645e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6462:	8043      	strh	r3, [r0, #2]
   d6464:	f241 2334 	movw	r3, #4660	; 0x1234
   d6468:	8083      	strh	r3, [r0, #4]
   d646a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d646e:	80c3      	strh	r3, [r0, #6]
   d6470:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6474:	8103      	strh	r3, [r0, #8]
   d6476:	2305      	movs	r3, #5
   d6478:	8143      	strh	r3, [r0, #10]
   d647a:	230b      	movs	r3, #11
   d647c:	8183      	strh	r3, [r0, #12]
   d647e:	2201      	movs	r2, #1
   d6480:	2300      	movs	r3, #0
   d6482:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6488:	2200      	movs	r2, #0
   d648a:	611d      	str	r5, [r3, #16]
   d648c:	615a      	str	r2, [r3, #20]
   d648e:	bd38      	pop	{r3, r4, r5, pc}
   d6490:	2003e334 	.word	0x2003e334

000d6494 <strlen>:
   d6494:	4603      	mov	r3, r0
   d6496:	f813 2b01 	ldrb.w	r2, [r3], #1
   d649a:	2a00      	cmp	r2, #0
   d649c:	d1fb      	bne.n	d6496 <strlen+0x2>
   d649e:	1a18      	subs	r0, r3, r0
   d64a0:	3801      	subs	r0, #1
   d64a2:	4770      	bx	lr

000d64a4 <dynalib_user>:
   d64a4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d64b4:	0000 0000 4441 5f43 5f41 454e 504f 5849     ....ADC_A_NEOPIX
   d64c4:	4c45 6220 6765 6e69 6300 6c61 656c 2064     EL begin.called 
   d64d4:	6f64 7469 4100 4344 415f 4e5f 4f45 4950     doit.ADC_A_NEOPI
   d64e4:	4558 204c 7270 636f 7365 0073 4441 5f43     XEL process.ADC_
   d64f4:	5f41 4553 4952 4c41 6220 6765 6e69 0000     A_SERIAL begin..
   d6504:	c000 4001 1000 4002 2000 4002               ...@...@. .@

000d6510 <CSWTCH.68>:
   d6510:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d6520:	0050 0000 4f43 544e 4441 524f 4e5f 4f45     P...CONTADOR_NEO
   d6530:	4950 4558 204c 6562 6967 006e 4f43 544e     PIXEL begin.CONT
   d6540:	4441 524f 4e5f 4f45 4950 4558 204c 7270     ADOR_NEOPIXEL pr
   d6550:	636f 7365 0073 5541 4f54 495f 434e 4552     ocess.AUTO_INCRE
   d6560:	4249 454c 6220 6765 6e69 4100 5455 5f4f     IBLE begin.AUTO_
   d6570:	4e49 5243 4945 4c42 2045 7270 636f 7365     INCREIBLE proces
   d6580:	0073 6163 6c6c 6465 6320 656c 6e61 7541     s.called cleanAu
   d6590:	6f74 4100 4344 415f 525f 4247 6220 6765     to.ADC_A_RGB beg
   d65a0:	6e69 4100 4344 415f 525f 4247 7020 6f72     in.ADC_A_RGB pro
   d65b0:	6563 7373 4300 4e4f 4154 4f44 5f52 4942     cess.CONTADOR_BI
   d65c0:	414e 4952 204f 6562 6967 006e 4f43 544e     NARIO begin.CONT
   d65d0:	4441 524f 525f 4247 6220 6765 6e69 4300     ADOR_RGB begin.C
   d65e0:	4e4f 4154 4f44 5f52 4752 2042 7270 636f     ONTADOR_RGB proc
   d65f0:	7365 0073 4441 5f43 5f41 454e 504f 5849     ess.ADC_A_NEOPIX
   d6600:	4c45 2032 6562 6967 006e 6163 6c6c 6465     EL2 begin.called
   d6610:	7020 6f72 6563 7373 0000 0000                process....

000d661c <_ZTVN5spark13EthernetClassE>:
	...
   d6624:	5723 000d 5719 000d 570f 000d 5705 000d     #W...W...W...W..
   d6634:	56f9 000d 56ed 000d 56e1 000d 56d9 000d     .V...V...V...V..
   d6644:	56cf 000d 56c5 000d 5f7d 000d               .V...V..}_..

000d6650 <_ZTV8SPIClass>:
	...
   d6658:	5741 000d 5743 000d 0066 6e6c 6600 006e     AW..CW..f.ln.fn.
   d6668:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
   d6678:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d6688:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d6698:	0069 6564 6174 6c69 2073 203d 6200 7561     i.details = .bau
   d66a8:	0064 6553 6972 6c61 5300 7265 6169 316c     d.Serial.Serial1
   d66b8:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
   d66c8:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
   d66d8:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
   d66e8:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
   d66f8:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
   d6708:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
   d6718:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
   d6728:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d6738:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d6748:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d6758:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d6768:	0065 0000                                   e...

000d676c <_ZTV9IPAddress>:
	...
   d6774:	5a13 000d 5a05 000d 5a07 000d               .Z...Z...Z..

000d6780 <_ZTV9USBSerial>:
	...
   d6788:	5aed 000d 5b31 000d 5b0b 000d 5799 000d     .Z..1[...[...W..
   d6798:	5b05 000d 5aef 000d 5af7 000d 5b2b 000d     .[...Z...Z..+[..
   d67a8:	5aff 000d 5ae9 000d                         .Z...Z..

000d67b0 <_ZTV11USARTSerial>:
	...
   d67b8:	5bc9 000d 5bed 000d 5bf9 000d 5799 000d     .[...[...[...W..
   d67c8:	5bd5 000d 5be1 000d 5bdb 000d 5be7 000d     .[...[...[...[..
   d67d8:	5bcb 000d 5bcf 000d                         .[...[..

000d67e0 <_ZTV7TwoWire>:
	...
   d67e8:	5c9d 000d 5ce7 000d 5cbf 000d 5c9f 000d     .\...\...\...\..
   d67f8:	5cc7 000d 5ccf 000d 5cd7 000d 5cdf 000d     .\...\...\...\..

000d6808 <_ZTVN5spark9MeshClassE>:
	...
   d6810:	5dc3 000d 5db9 000d 5daf 000d 5da5 000d     .]...]...]...]..
   d6820:	5d99 000d 5d8d 000d 5d81 000d 5d79 000d     .]...]...]..y]..
   d6830:	5d6f 000d 5d65 000d 5f7d 000d               o]..e]..}_..

000d683c <_ZTVN5spark9WiFiClassE>:
	...
   d6844:	5ef7 000d 5eed 000d 5ee3 000d 5e99 000d     .^...^...^...^..
   d6854:	5ed7 000d 5ecb 000d 5ebf 000d 5eb7 000d     .^...^...^...^..
   d6864:	5ead 000d 5ea3 000d 5f7d 000d               .^...^..}_..

000d6870 <_ZTVN5spark12NetworkClassE>:
	...
   d6878:	5f15 000d 5f1f 000d 5f29 000d 5f33 000d     ._..._..)_..3_..
   d6888:	5f3d 000d 5f49 000d 5f55 000d 5f61 000d     =_..I_..U_..a_..
   d6898:	5f69 000d 5f73 000d 5f7d 000d               i_..s_..}_..

000d68a4 <__sf_fake_stdin>:
	...

000d68c4 <__sf_fake_stdout>:
	...

000d68e4 <__sf_fake_stderr>:
	...
   d6904:	0043                                        C.

000d6906 <link_const_variable_data_end>:
	...

000d6908 <link_constructors_location>:
   d6908:	000d42b9 	.word	0x000d42b9
   d690c:	000d4355 	.word	0x000d4355
   d6910:	000d4415 	.word	0x000d4415
   d6914:	000d4921 	.word	0x000d4921
   d6918:	000d4aa9 	.word	0x000d4aa9
   d691c:	000d4c51 	.word	0x000d4c51
   d6920:	000d4e0d 	.word	0x000d4e0d
   d6924:	000d4f9d 	.word	0x000d4f9d
   d6928:	000d4fdb 	.word	0x000d4fdb
   d692c:	000d5169 	.word	0x000d5169
   d6930:	000d529d 	.word	0x000d529d
   d6934:	000d572d 	.word	0x000d572d
   d6938:	000d5781 	.word	0x000d5781
   d693c:	000d58cd 	.word	0x000d58cd
   d6940:	000d58dd 	.word	0x000d58dd
   d6944:	000d5915 	.word	0x000d5915
   d6948:	000d5e4d 	.word	0x000d5e4d
   d694c:	000d5f01 	.word	0x000d5f01
   d6950:	000d6001 	.word	0x000d6001
   d6954:	000d60e1 	.word	0x000d60e1
   d6958:	000d6171 	.word	0x000d6171
   d695c:	000d61f5 	.word	0x000d61f5
   d6960:	000d62b9 	.word	0x000d62b9
   d6964:	000d637d 	.word	0x000d637d

000d6968 <link_constructors_end>:
	...
